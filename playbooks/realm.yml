- hosts: all:!public_zone
  ignore_unreachable: yes
  pre_tasks:
    - name: "Create groups based on the Network OS"
      group_by:
        key: "{{ ansible_network_os.split('.')[2] | lower }}"
      when:
        - ansible_network_os is defined
      tags:
        - always

    - name: "Create groups based on the OS Family"
      group_by:
        key: "{{ ansible_os_family | lower }}"
      when:
        - ansible_os_family is defined
      tags:
        - always

    - name: "Create groups based on the System"
      group_by:
        key: "{{ ansible_system | lower }}"
      when:
        - ansible_system is defined
      tags:
        - always

- hosts: internal_network:!routeros
  roles:
    - role: bloodymage.rebeldream.krb5_client_config

- hosts: samba_domain_controllers
  pre_tasks:
    - name: "Determine whether to force domain recreation"
      ansible.builtin.set_fact:
        __samba_recreate_realm: yes
      become: no
      tags:
        - never
        - recreate-realm

    - name: "Set Samba Schema Master to Running Schema Master (Only if not regenerating realm)"
      command:
        cmd: "samba-tool fsmo show"
      register: __samba_schema_master_role
      run_once: yes
      become: yes
      when:
        - not __samba_recreate_realm
      tags:
        - always

    - name: Print Samba Schema Master Role
      debug:
        msg:
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] }}"
        verbosity: 1
      become: no
      when:
        - __samba_schema_master_role is defined
      tags:
        - never
        - debug

    - name: Print Variables
      debug:
        msg:
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[0] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[1] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[2] }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3] }}"
        verbosity: 2
      become: no
      when:
        - __samba_schema_master_role is defined
      tags:
        - never
        - debug

    - name: Print Variables
      debug:
        var: __samba_schema_master_role.stdout_lines[0]
        verbosity: 3
      become: no
      when:
        - __samba_schema_master_role is defined
      tags:
        - never
        - debug

    - name: Print Variables
      debug:
        var: __samba_schema_master_role.stdout_lines
        verbosity: 4
      become: no
      when:
        - __samba_schema_master_role is defined
      tags:
        - never
        - debug

    - name: Print Variables
      debug:
        var: __samba_schema_master_role
        verbosity: 4
      become: no
      when:
        - __samba_schema_master_role is defined
      tags:
        - never
        - debug

    - name: Set Samba Schema Master
      ansible.builtin.set_fact:
        __samba_schema_master: "{{ __samba_schema_master_list | join('.') }}"
      become: no
      vars:
        __samba_schema_master_list:
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] | lower }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] | lower }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] | lower }}"
          - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] | lower }}"
      when:
        - not __samba_recreate_realm
      tags:
        - always

    - name: Print Samba Schema Master
      debug:
        msg:
          - "Schema Master: {{ __samba_schema_master }}"
        verbosity: 1
      become: no
      when:
        - __samba_schema_master is defined
      tags:
        - never
        - debug

    - name: "Create Samba Schema Master Group"
      add_host:
        name: "{{ __samba_schema_master }}"
        groups:
          - samba_schema_master
      when:
        - __samba_schema_master is defined
      tags:
        - always
  roles:
    - role: bloodymage.rebeldream.samba_domain_controller
      tags:
        - samba_domain_controller
        - samba-domain-controller

- hosts: samba_schema_master
  pre_tasks:
    - name: Check if we are regenerating all ownca certs
      ansible.builtin.set_fact:
        __ownca_regenerate: yes
      become: no
      changed_when: __ownca_regenerate
      tags:
        - never
        - regenerate-ownca
  roles:
    - role: bloodymage.rebeldream.samba_domain_users
      tags:
        - samba_domain_users
        - samba-domain-users
        - samba_domain_users_debug
        - samba-domain-users-debug

# - hosts: freeipa_controllers

# - hosts: openldap_servers
#   roles:
#     - role: bloodymage.rebeldream.openldap

- hosts: sssd
  roles:
    - role: bloodymage.rebeldream.sssd

- hosts: keytabs
  roles:
    - role: bloodymage.rebeldream.samba_domain_keytabs
  tags:
    - samba-domain-keytabs

- hosts: keycloak_servers:!public_zone
  roles:
    - role: bloodymage.rebeldream.keycloak

# - hosts: samba_dotfiles
#   roles:
#     - role: bloodymage.rebeldream.dotfiles

- hosts: samba_ownca_user_hosts
  roles:
    - role: bloodymage.rebeldream.ownca_user_certs
      tags:
        - ownca_user_certs
        - ownca-user-certs
        - ownca_user_certs_debug
        - ownca-user-certs-debug

- hosts: samba_schema_master
  roles:
    - role: bloodymage.rebeldream.samba_domain_user_certs
      tags:
        - samba-domain-user-certs
