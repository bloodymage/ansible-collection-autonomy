---
# tasks file for mail-server
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: false
  tags:
    - install-packages

- name: "Check if we need ldap related packages."
  ansible.builtin.set_fact:
    autonomy_postfix_packages: "{{ autonomy_postfix_packages + ['postfix-ldap'] }}"
  when:
    - autonomy_realm_identity_management_system is truthy
    - autonomy_zone_type == "internal"
  tags:
    - install-packages

- name: "Check if we need mysql related packages."
  ansible.builtin.set_fact:
    autonomy_postfix_packages: "{{ autonomy_postfix_packages + ['postfix-mysql'] }}"
  when:
    - postfix_use_mysql_backend
  tags:
    - install-packages

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ autonomy_postfix_packages }}"
    state: present
  become: true
  tags:
    - install-packages

- name: "Check if we are using Active Directory."
  ansible.builtin.set_fact:
    postfix_local_recipient_maps:
      - "$virtual_mailbox_maps"
    postfix_virtual_alias_maps:
      - "proxy:ldap:/etc/postfix/ad_virtual_user_maps.cf"
      - "proxy:ldap:/etc/postfix/ad_virtual_user_aliases_maps.cf"
      - "proxy:ldap:/etc/postfix/ad_virtual_group_maps.cf"
    postfix_virtual_mailbox_maps:
      - "hash:/etc/postfix/virtual-mailbox-users"
      - "proxy:ldap:/etc/postfix/ad_virtual_mailbox_maps.cf"
    postfix_smtpd_sender_login_maps:
      - "proxy:ldap:/etc/postfix/ad_sender_login_maps.cf"
      - "$virtual_mailbox_maps"
    postfix_ldap_maps:
      - name: ad_sender_login_maps
        query_filter: "(&(objectclass=person)(!(userAccountControl:1.2.840.113556.1.4.903:=2))(|(mail=%s)(userPrincipalName=%s)(otherMailbox=%s)(proxyAddresses=smtp:%s)))"
        result_attribute: "userPrincipalName"
        scope: "one"
      - name: ad_virtual_group_maps
        query_filter: "(&(objectclass=group)(mail=%s))"
        result_attribute: "userPrincipalName"
        special_result_attribute: "member"
        scope: "sub"
      - name: ad_virtual_mailbox_maps
        scope: "sub"
        query_filter: "(&(objectclass=person)(userPrincipalName=%s))"
        result_attribute: "mail"
        result_format: "%d/%u/Maildir/"
      - name: ad_virtual_user_aliases_maps
        scope: "sub"
        query_filter: "(&(objectclass=person)(otherMailbox=%s))"
        result_attribute: "userPrincipalName"
      - name: ad_virtual_user_maps
        query_filter: "(&(objectclass=person)(mail=%s))"
        result_attribute: "userPrincipalName"
        leaf_result_attribute: "mail"
        scope: "sub"
  become: false
  when:
    - autonomy_realm_identity_management_system is truthy
    - autonomy_zone_type == "internal"

- name: "Check if we are using dovecot."
  ansible.builtin.set_fact:
    __postfix_master_service_configuration: "{{ __postfix_master_service_configuration + [__postfix_master_dovecot_service_configuration] }}"
    postfix_mailbox_transport: "lmtp:unix:private/dovecot-lmtp"
    postfix_smtpd_sasl_path: "private/auth"
    postfix_smtpd_sasl_type: "dovecot"
    postfix_virtual_transport: "dovecot"
  become: false
  when:
    - inventory_hostname in groups['dovecot_servers']

- name: "Check if we are using OpenDKIM."
  ansible.builtin.set_fact:
    postfix_smtpd_milters: "{{ postfix_smtpd_milters + [mail_opendkim_unix_socket] }}"
  when:
    - inventory_hostname in groups['opendkim_servers']

- name: "Get Users' password from password-store"
  ansible.builtin.set_fact:
    __mail_user: "{{ mail_user }}"
    __mail_user_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/domain_users/{{ mail_user }}/password"
    __password_lookup: "{{ __password_store_id }}"
  no_log: yes
  become: false
  delegate_to: localhost
  register: domain_user_list
  when:
    - autonomy_realm_identity_management_system is truthy

# ==================================================================================================
#
# This is separate from above because sometimes we need these only apply if we are configuring
# authentication to an external relay server
#
# Update: this needs to be BEFORE the installation of the main.cf because smtp(d)_sasl_security_options
# change if this is set.
#
# ==================================================================================================
- name: "Get default relay users password."
  ansible.builtin.set_fact:
    postfix_sasl_auth_user_password: "{{ __password }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/external_services/{{ postfix_sender_relay }}/{{ postfix_sasl_auth_user }}"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - postfix_sender_relay is truthy

- name: "Get relay users password."
  ansible.builtin.set_fact:
    __postfix_sasl_auth_users_list: "{{ __postfix_sasl_auth_users_list + __user }}"
    postfix_smtp_sasl_tls_security_options:
      - "noanonymous"
    postfix_smtpd_sasl_tls_security_options:
      - "noanonymous"
    postfix_smtpd_sasl_security_options:
      - "noanonymous"
      - "noplaintext"
  loop: "{{ postfix_sasl_auth_users_list }}"
  vars:
    __user:
      - origin: "{{ item.origin }}"
        destination: "{{ item.destination }}"
        password: "{{ item.password | default(__password) }}"
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/external_services/{{ postfix_sender_relay }}/{{ item.destination }}"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - postfix_sender_relay is truthy

- name: "Identify relay domains."
  ansible.builtin.set_fact:
    __postfix_relay_domains: "{{ __postfix_relay_domains + [item.domain] }}"
  become: false
  loop: "{{ autonomy_zones }}"
  when:
    - autonomy_zone_type == "dmz"
    - item.type == "public"

- name: "Identify virtual domains."
  ansible.builtin.set_fact:
    __postfix_virtual_mailbox_domain_maps:
      - name: "{{ autonomy_domain }}"
        status: "OK"
  become: false
  when:
    - autonomy_zone_type == "dmz"
    - inventory_hostname not in groups['dovecot_servers']

- name: "Identify virtual domains."
  ansible.builtin.set_fact:
    __postfix_virtual_mailbox_domain_maps: "{{ __postfix_virtual_mailbox_domain_maps + [__domain] }}"
  become: false
  vars:
    __domain:
      name: "{{ item.domain }}"
      status: "OK"
  loop: "{{ autonomy_zones }}"
  when:
    - (item.type == "internal" or item.type == "public")
    - inventory_hostname in groups['dovecot_servers']

# ==================================================================================================
#
# Now that we have identified all conditional settings ,we start creating directories and files.
#
# ==================================================================================================
- name: "Ensure log directory exists."
  ansible.builtin.file:
    path: "/var/log/postfix"
    owner: root
    group: root
    mode: "0755"
    state: directory
  become: true

- name: "Install configuration files."
  ansible.builtin.template:
    src: "etc/postfix/{{ item }}.j2"
    dest: "/etc/postfix/{{ item }}"
    owner: root
    group: root
    mode: "0644"
    #validate: "/usr/sbin/postfix check"
  become: true
  loop:
    - dynamicmaps.cf
    - main.cf
    - makedefs.out
    - master.cf
  notify:
    - "restart postfix"

- name: "Install ldap user and group map files."
  ansible.builtin.template:
    src: "etc/postfix/ldap_maps.j2"
    dest: "/etc/postfix/{{ item.name }}.cf"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ postfix_ldap_maps }}"
  become: true
  notify:
    - "restart postfix"
  when:
    - __mail_user_password is defined
    - postfix_ldap_maps is defined

- name: "Install Configuration files (postmap update required)."
  ansible.builtin.template:
    src: "etc/postfix/{{ item.filename }}.j2"
    dest: "/etc/postfix/{{ item.filename }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  become: true
  loop: "{{ autonomy_postfix_config_map_files }}"
  notify:
    - "map {{ item.filename }}"
  when:
    - item.install

- name: "Install virtual mailboxes' configuration files (postmap update required)."
  ansible.builtin.template:
    src: "etc/postfix/virtual.j2"
    dest: "/etc/postfix/{{ item.type }}"
    owner: root
    group: root
    mode: "0644"
  become: true
  loop: "{{ __postfix_virtual_mailboxes }}"
  notify:
    - "map {{ item.type }}"

- name: "Install SMTP Header Checks."
  ansible.builtin.template:
    src: "etc/postfix/smtp_header_checks.j2"
    dest: "/etc/postfix/smtp_header_checks"
    owner: root
    group: root
    mode: "0644"
  become: true
  notify:
    - "restart postfix"
  when:
    - postfix_smtp_header_checks != __postfix_smtp_header_checks
