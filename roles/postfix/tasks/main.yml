---
# tasks file for mail-server
- name: "Prepare Host"
  block:
    - name: Include OS-specific variables.
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: "{{ __os_variables_files }}"
          paths:
            - "vars"
      become: no
      tags:
        - postfix
        - postfix_debug
        - postfix-debug

    - name: "Check if we need ldap related packages."
      ansible.builtin.set_fact:
        autonomy_packages: "{{ autonomy_packages }} + ['postfix-ldap']"
      when:
        - autonomy_realm_identity_management_system is truthy

    - name: "Check if we need mysql related packages."
      ansible.builtin.set_fact:
        autonomy_packages: "{{ autonomy_packages }} + ['postfix-mysql']"
      when:
        - postfix_use_mysql_backend

    - name: "Install packages"
      ansible.builtin.package:
        name: "{{ autonomy_packages }}"
        state: present
      become: yes
      tags:
        - postfix
        - postfix_debug
        - postfix-debug
        - install-packages

- name: "Check if we are using dovecot."
  ansible.builtin.set_fact:
    __postfix_master_service_configuration: "{{ __postfix_master_service_configuration + [__postfix_master_dovecot_service_configuration] }}"
  when:
    - inventory_hostname in groups['dovecot_servers']

- name: "Check if we are using OpenDKIM."
  ansible.builtin.set_fact:
    postfix_smtpd_milters: "{{ postfix_smtpd_milters + [mail_opendkim_unix_socket] }}"
  when:
    - inventory_hostname in groups['opendkim_servers']

- name: "Get Users' password from password-store"
  ansible.builtin.set_fact:
    __mail_user: "{{ mail_user }}"
    __mail_user_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/domain_users/{{ mail_user }}/password"
    __password_lookup: "{{ __password_store_id }}"
  no_log: yes
  become: no
  delegate_to: localhost
  register: domain_user_list
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

- name: "Install configuration files"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/postfix/{{ item }}"
    owner: root
    group: root
    mode: "0644"
    #validate: "/usr/sbin/postfix check"
  become: yes
  loop:
    - dynamicmaps.cf
    - main.cf
    - makedefs.out
    - master.cf
  notify: restart postfix
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

- name: "Install ldap user and group map files"
  ansible.builtin.template:
    src: "ldap_maps.j2"
    dest: "/etc/postfix/{{ item.name }}.cf"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ postfix_ldap_maps }}"
  become: yes
  when:
    - inventory_hostname in groups['samba_domain']
    - __mail_user_password is defined
    - postfix_ldap_maps is defined
  notify: restart postfix
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

- name: "Install Configuration files (postmap update required)"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/postfix/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop:
    - client_access
    - helo_access
    - transport
  notify: map {{ item }}
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

- name: "Install virtual mailboxes' configuration files (postmap update required)"
  ansible.builtin.template:
    src: "virtual.j2"
    dest: "/etc/postfix/{{ item.type }}"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop: "{{ __postfix_virtual_mailboxes }}"
  notify: map {{ item.type }}
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

# ==================================================================================================
#
# This is separate from above because sometimes we need these only apply if we are configuring
# authentication to an external relay server
#
# ==================================================================================================
- name: "Get relay users password."
  ansible.builtin.set_fact:
    __postfix_sasl_auth_users_list: "{{ __postfix_sasl_auth_users_list + __user }}"
  loop: "{{ postfix_sasl_auth_users_list }}"
  vars:
    __user:
      - origin: "{{ item.origin }}"
        destination: "{{ item.destination }}"
        password: "{{ item.password | default(__password) }}"
    __password_store_id: "{{ autonomy_domain }}/external_services/{{ postfix_sender_relay }}/{{ item.destination }}"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - postfix_sender_relay is truthy

- name: "Get defaulut relay users password."
  ansible.builtin.set_fact:
    postfix_sasl_auth_user_password: "{{ __password }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/external_services/{{ postfix_sender_relay }}/{{ postfix_sasl_auth_user }}"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - postfix_sender_relay is truthy

- name: "Install Configuration files (postmap update required)"
  ansible.builtin.template:
    src: "{{ item.filename }}.j2"
    dest: "/etc/postfix/{{ item.filename }}"
    owner: root
    group: root
    mode: "{{ item.mode  }}"
  become: yes
  loop: "{{ postfix_sasl_relay_files }}"
  notify: map {{ item.filename }}
  when:
    - __postfix_sasl_auth_users_list is defined
    - postfix_sender_relay is truthy
  tags:
    - postfix
    - postfix_debug
    - postfix-debug

- name: "Install SMTP Header Checks."
  ansible.builtin.template:
    src: "smtp_header_checks.j2"
    dest: "/etc/postfix/smtp_header_checks"
    owner: root
    group: root
    mode: "0644"
  become: yes
  notify: restart postfix
  when:
    - postfix_smtp_header_checks != __postfix_smtp_header_checks
