---
# tasks file for sshca-user-certs
- name: "Create user pki directories"
  ansible.builtin.file:
    path: "{{ ownca_directory }}/users/{{ item.name }}"
    state: directory
    owner: "{{ ownca_user }}"
    group: "{{ ownca_user }}"
    mode: "{{ item.mode }}"
  become: no
  loop: "{{ sshca_user_pki_dirs }}"
  delegate_to: localhost
  run_once: yes

- name: "Get information from user authentication x509 certificate"
  community.crypto.x509_certificate_info:
    path: "{{ ownca_directory }}/users/certs/{{ item.username }}_authentication.crt"
  loop: "{{ domain_users }}"
  register: __result
  delegate_to: localhost
  run_once: yes
  when:
    - item.username is defined
    - item.id_number is defined

- name: "Check user information"
  ansible.builtin.debug:
    msg:
      - "{{ item.public_key }}"
    verbosity: 1
  loop: "{{ __result.results }}"
  become: no
  delegate_to: localhost
  run_once: yes
  when:
    - __result.results is defined
    - item.public_key is defined

- name: "Check user information"
  ansible.builtin.debug:
    msg:
      - "{{ item.item.given_name | default(item.item.username) }}"
      - "{{ item.public_key }}"
    verbosity: 2
  loop: "{{ __result.results }}"
  become: no
  delegate_to: localhost
  run_once: yes
  when:
    - __result.results is defined
    - item.public_key is defined

- name: "Check user information"
  ansible.builtin.debug:
    msg:
      - "{{ item }}"
    verbosity: 3
  loop: "{{ __result.results }}"
  become: no
  delegate_to: localhost
  run_once: yes
  when:
    - __result.results is defined

- name: "Check user information"
  ansible.builtin.debug:
    msg:
      - "{{ __result }}"
    verbosity: 4
  become: no
  delegate_to: localhost
  run_once: yes

- name: "Create user public key"
  ansible.builtin.copy:
    dest: "{{ ownca_directory }}/users/certs/{{ item.item.username }}.pub"
    content:  "{{ item.public_key }}"
    owner: "{{ ownca_user }}"
    group: "{{ ownca_user }}"
    mode: "0644"
  loop: "{{ __result.results }}"
  become: no
  delegate_to: localhost
  run_once: yes
  when:
    - item.public_key is defined

# ==================================================================================================
#
# I tried this with 'ansible.builtin.command' it failed every time.  Really not sure why.
#
# ==================================================================================================
- name: "Convert public key to ssh public key format"
  ansible.builtin.shell:
    cmd: "ssh-keygen -i -m PKCS8 -f {{ __pubkey }} > {{ __ssh_pubkey }}"
    executable: "/bin/bash"
    chdir: "{{ ownca_directory }}/users"
    creates: "{{ __ssh_pubkey }}"
  loop: "{{ domain_users }}"
  become: no
  delegate_to: localhost
  run_once: yes
  vars:
    __pubkey: "certs/{{ item.username }}.pub"
    __ssh_pubkey: "ssh/{{ item.username }}.pub"
  when:
    - item.id_number is defined

# ==================================================================================================
#
# We could remove this next task by moving the lookup to the next task, and doing the lookup each
# time a key is signed.  That would reduce the number of overall tasks, simplifying this role,
# not sure if it'd make things any faster (or slower).  It would complicate the next task.
#
# ==================================================================================================
- name: "Ensure we have a password for the User CA Key"
  ansible.builtin.set_fact:
    sshca_user_key_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ rebeldream_org_name }}_common/sshca/sshca_user_key_password"
    __password_lookup: "{{ __password_store_id }}"
  become: no
  delegate_to: localhost
  run_once: yes
  changed_when:
    - sshca_user_key_password != "password"
  when:
    - sshca_user_key_password == "password"

# ==================================================================================================
#
# Currently we use shell instead of 'community.crypto.openssh_cert' because that module does not
# support certificate authorities with a password.
#
# ==================================================================================================
- name: "Sign SSH keys."
  expect:
    command: ssh-keygen -s "{{ sshca_user_signer_key }}"
             -I "{{ sshca_user_signer_id }}"
             -n "{{ __ssh_principals }}"
             "{{ ownca_directory }}/users/ssh/{{ item.username }}.pub"
    responses:
      (?i)passphrase: "{{ sshca_user_key_password }}"
  loop: "{{ domain_users }}"
  changed_when: false
  become: no
  delegate_to: localhost
  run_once: yes
  #no_log: yes
  vars:
    __ssh_principals_list: "{% if item.ssh_principals is defined %}{{ item.ssh_principals + [item.username] }}{% else %}{{ [item.username] }}{% endif %}"
    __ssh_principals: "{% for principal in __ssh_principals_list %}{{ principal }}{{ ',' if not loop.last else '' }}{% endfor %}"
  when:
    - item.id_number is defined

- name: "Ensure user has their .ssh directory"
  ansible.builtin.file:
    path: "/home/{{ rebeldream_org_unit_name | upper }}/{{ item.username }}/.ssh"
    state: directory
    owner: "{{ item.id_number }}"
    group: "{{ item.id_number }}"
    mode: "0700"
  loop: "{{ domain_users }}"
  become: yes
  when:
    - item.id_number is defined

- name: "Install SSH public key"
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/ssh/{{ item.username }}.pub"
    dest: "/home/{{ rebeldream_org_unit_name | upper }}/{{ item.username }}/.ssh/{{ item.username }}.pub"
    owner: "{{ item.id_number }}"
    group: "{{ item.id_number }}"
    mode: "0644"
  loop: "{{ domain_users }}"
  become: yes
  when:
    - item.id_number is defined

- name: "Install SSH Certificate"
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/ssh/{{ item.username }}-cert.pub"
    dest: "/home/{{ rebeldream_org_unit_name | upper }}/{{ item.username }}/.ssh/{{ item.username }}-cert.pub"
    owner: "{{ item.id_number }}"
    group: "{{ item.id_number }}"
    mode: "0644"
  loop: "{{ domain_users }}"
  become: yes
  when:
    - item.id_number is defined

- name: Create SSH Principals file for users
  ansible.builtin.template:
    src: "ssh_principals.j2"
    dest: "/etc/ssh/auth_principals/{{ __realm }}{{ item.username }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ domain_users }}"
  become: yes
  vars:
    __realm: "{% if inventory_hostname not in groups['sssd'] %}{{ rebeldream_org_unit_name | upper }}\\{% else %}{% endif %}"
  when:
    - item.id_number is defined

# This fails miserably.  Disabled for now.
# - name: Authorize key with GitHub
#   ansible.builtin.github_key:
#     name: "{{ item.username | title }}"
#     token: '{{ rebeldream_github_oauth_token }}'
#     pubkey: "{{ lookup('file', __ssh_pubkey) }}"
#     state: present
#   loop: "{{ domain_users }}"
#   delegate_to: localhost
#   vars:
#     __ssh_pubkey: "{{ ownca_directory }}/users/ssh/{{ item.username }}.pub"
#   when:
#     - item.id_number is defined
#     - item.username in rebeldream_github_users
