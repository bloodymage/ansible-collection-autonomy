---
# ==================================================================================================
#
# OS Specific Setup
#
#
# ==================================================================================================
- name: "Include OS-specific variables."
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no
  when:
    - autonomy_virtual_host is falsy
    - inventory_hostname not in groups['public_zone'] | default([])

- name: "Install packages."
  ansible.builtin.package:
    name: "{{ autonomy_packages }}"
    state: present
  become: yes
  when:
    - autonomy_virtual_host is falsy
    - inventory_hostname not in groups['public_zone'] | default([])

# ==================================================================================================
#
# Set Variables
#
# ==================================================================================================
# - name: "Check bind version."
#   ansible.builtin.debug:
#     msg:
#       - "{{ ansible_facts.packages['bind9'][0]['version'] }}"
#   when: "'bind9' in ansible_facts.packages"

# ==================================================================================================
#
# The included tasks generate keys used for dynamic dns
#
# ==================================================================================================
- name: "Configure Dynamic DNS Keys."
  include_tasks: dynamic_dns.yml

# ==================================================================================================
#
# Install Configuration files
#
# ==================================================================================================
- name: "Install Bind Config Files."
  ansible.builtin.template:
    src: "etc/bind/{{ item }}.j2"
    dest: "{{ bind_conf_dir }}/{{ item }}"
    owner: root
    group: root
    mode: "0644"
    #validate: "{{ __bind_named_checkconf }} %s"
  become: yes
  loop: "{{ bind_config_files }}"
  when:
    - bind_dyndns_secret is defined
    - inventory_hostname not in groups['public_zone'] | default([])
    #- autonomy_virtual_host is falsy
    - (autonomy_bind_forwardzones is defined or inventory_hostname in groups['samba_domain_controllers'] | default([]))
    - groups['dmz_dns_servers'] is defined # Temporary fix for #534
  notify: restart bind

# ==================================================================================================
#
# This creates the following directories:
#   - /var/lib/bind/
#   - /var/cache/bind/
#
# These are set 0775 so that the bind group can make changes.
#
# ==================================================================================================
- name: "Ensure Zone Directories Exists and are writable by bind user."
  ansible.builtin.file:
    dest: "{{ item.name }}"
    state: directory
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "{{ item.mode }}"
  become: yes
  loop: "{{ __autonomy_bind_zone_directories }}"
  when:
    - autonomy_virtual_host is falsy
    - bind_dyndns_secret is defined
    - inventory_hostname not in groups['public_zone'] | default([])

# ==================================================================================================
#
# Flush the handlers (restart bind9) to ensure bind is running with the current configuration. This
# fixes a problem where the root dns zone file can not be downloaded because bind is not running,
# which causes dns lookup errors on the next step.
#
# It also will cause the play to end for any host that has an invalid configuration right away.
#
# ==================================================================================================
- name: "Ensure bind is up and running."
  ansible.builtin.meta: flush_handlers

# ==================================================================================================
#
# Install Zone Files
#
# FIXME: This fails if bind daemon is not running.
#
# Set 'force' to 'no' because once installed bind will update the file itself.  Only needed if the
# file does not exist.
#
# ==================================================================================================
- name: "Download Root Zone file."
  ansible.builtin.get_url:
    url: "http://www.internic.net/domain/root.zone"
    dest: "{{ bind_cache_dir }}/db.root"
    owner: bind
    group: bind
    mode: "0644"
    force: no
  become: yes
  when:
    - autonomy_virtual_host is falsy
    - bind_dyndns_secret is defined
    - inventory_hostname not in groups['public_zone'] | default([])

# ==================================================================================================
#
# The next two templates have 'force' set to 'no' so that they only install a new zone file if one
# does not already exist.  Any further updates are done via the 'nsupdate' module in either the
# dns_forwardzone or dns_reversezone roles.
#
# ==================================================================================================
- name: "Installing Forward Zone files."
  ansible.builtin.template:
    src: "var/lib/bind/forwardzone.j2"
    dest: "{{ bind_zone_dir }}/db.{{ autonomy_domain }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0644"
    force: no
    #validate: "{{ __bind_named_checkzone }} {{ item['domain'] }} %s"
  become: yes
  register: forwardzone_refresh
  when:
    - not autonomy_bind_zone_samba_controlled
    - inventory_hostname not in groups['samba_domain_controllers'] | default([])
  notify: restart bind

- name: "Installing Reverse Zone files."
  ansible.builtin.template:
    src: "var/lib/bind/reversezone.j2"
    dest: "{{ bind_zone_dir }}/db.{{ item['name'] }}"
    owner: "{{ bind_owner }}"
    group: "{{ bind_group }}"
    mode: "0644"
    force: no
    #validate: "{{ __bind_named_checkzone }} {{ item.name }} %s"
  loop: "{{ autonomy_bind_reversezones }}"
  become: yes
  register: reversezone_refresh
  when:
    - autonomy_bind_reversezones is defined
    - inventory_hostname not in groups['samba_domain_controllers'] | default([])
  notify: restart bind
