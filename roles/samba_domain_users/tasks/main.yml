---
- name: Determine whether to force domain recreation
  ansible.builtin.set_fact:
    __samba_recreate_realm: yes
  become: no
  tags:
    - never
    - recreate-realm

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ groups['samba_domain_controllers'][0] }}"
  become: no
  when:
    - __samba_recreate_realm
  tags:
    - never
    - recreate-realm
    - recreate-realm-debug

- name: Set Samba Schema Master For Realm Recreation
  command:
    cmd: "samba-tool fsmo show"
  register: __samba_schema_master_role
  run_once: yes
  become: yes
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] }}"
    verbosity: 1
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[0] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[2] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3] }}"
    verbosity: 2
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines[0]
    verbosity: 3
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master_list:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] | lower }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ __samba_schema_master_list | join('.') }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=' + rebeldream_password_length + ' nosymbols=true') }}"
  vars:
    password_store_id: "{{ ansible_domain }}/domain_users/administrator/password"
  when:
    - samba_administrator_password == "password"
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Get Users' password from password-store"
  ansible.builtin.set_fact:
    username: "{{ item.username }}"
    groupname: "{{ item.groupname | default(none) }}"
    id_number: "{{ item.id_number | default(none) }}"
    password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=' + rebeldream_password_length + ' nosymbols=true') }}"
    given_name: "{{ item.given_name | default(item.username | title) }}"
    surname: "{{ item.surname | default(none) }}"
    initials: "{{ item.given_name[0] | default(none) }}{{ item.surname[0] | default(none) }}"
    job_title: "{{ item.job_title | default(none) }}"
    department: "{{ item.department | default(none) }}"
    company: "{{ item.company | default(none) }}"
    description: "{{ item.description | default(none) }}"
    physical_delivery_office: "{{ item.physical_delivery_office | default(none) }}"
    gecos: "{{ item.gecos | default(none) }}"
    email_aliases: "{{ item.email_aliases | default(none) }}"
    email_alt: "{{ item.email_alt | default(none) }}"
    gpg_keys: "{{ item.gpg_keys | default(none) }}"
    account_expire: "{{ item.account_expire | default(none) }}"
    spns: "{{ item.spns | default(none) }}"
  vars:
    password_store_id: "{{ ansible_domain }}/domain_users/{{ item.username }}/password"
  loop: "{{ domain_users }}"
  no_log: yes
  become: no
  delegate_to: localhost
  register: domain_user_list
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: "Get Domain Users"
  ansible.builtin.set_fact:
    __domain_users: "{{ domain_user_list.results }}"
  become: no
  delegate_to: localhost
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: "Check user information"
  ansible.builtin.debug:
    msg:
      - "Username:                        {{ item.ansible_facts.username }}"
      - "Groupname:                       {{ item.ansible_facts.groupname }}"
      - "id_number:                       {{ item.ansible_facts.id_number }}"
      - "password:                        {{ item.ansible_facts.password }}"
      - "Given Name:                      {{ item.ansible_facts.given_name }}"
      - "Surname:                         {{ item.ansible_facts.surname }}"
      - "Initials:                        {{ item.ansible_facts.initials }}"
      - "Job Title:                       {{ item.ansible_facts.job_title }}"
      - "Department:                      {{ item.ansible_facts.department }}"
      - "Company:                         {{ item.ansible_facts.company }}"
      - "Description                      {{ item.ansible_facts.description }}"
      - "Physical Delivery Office:        {{ item.ansible_facts.physical_delivery_office }}"
      - "gecos:                           {{ item.ansible_facts.gecos }}"
      - "email_aliases:                   {{ item.ansible_facts.email_aliases }}"
      - "email_alt:                       {{ item.ansible_facts.email_alt }}"
      - "gpg_keys:                        {{ item.ansible_facts.gpg_keys }}"
      - "account_expire:                  {{ item.ansible_facts.account_expire }}"
      - "spns:                            {{ item.ansible_facts.spns }}"
    verbosity: 1
  loop: "{{ __domain_users }}"
  loop_control:
    index_var: index
  become: yes
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Get Samba Groups
  command: "samba-tool group list"
  register: existing_group_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Existing Groups
  debug:
    var: existing_group_list.stdout_lines
    verbosity: 1
  tags:
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm-debug

- name: Get Samba Users
  command: "samba-tool user list"
  register: existing_user_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Existing Groups
  debug:
    var: existing_user_list.stdout_lines
    verbosity: 1
  tags:
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - item.id_number is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - item.id_number is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.ansible_facts.username }}" "{{ item.ansible_facts.password }}"
    --unix-home "/home/{{ ansible_domain.split('.')[0] }}/{{item.ansible_facts.username }}"
    --uid-number "{{ item.ansible_facts.id_number }}"
    --gid-number "{{ item.ansible_facts.id_number }}"
    --given-name "{{ item.ansible_facts.given_name }}"
    --surname "{{ item.ansible_facts.surname }}"
    --login-shell "{{ item.ansible_facts.login_shell | default ('/bin/bash') }}"
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address "{{ item.ansible_facts.username }}{{ samba_email_domain }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ __domain_users }}"
  when:
    - item.ansible_facts.given_name is defined
    - item.ansible_facts.surname != ""
    - item.ansible_facts.username not in existing_user_list.stdout_lines
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.ansible_facts.username }}" "{{ item.ansible_facts.password }}"
    --unix-home "/home/{{ ansible_domain.split('.')[0] }}/{{item.ansible_facts.username }}"
    --uid-number "{{ item.ansible_facts.id_number }}"
    --gid-number "{{ item.ansible_facts.id_number }}"
    --given-name "{{ item.ansible_facts.given_name }}"
    --login-shell "{{ item.ansible_facts.login_shell | default ('/bin/bash') }}"
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address "{{ item.ansible_facts.username }}{{ samba_email_domain }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ __domain_users }}"
  when:
    - item.ansible_facts.given_name is defined
    - item.ansible_facts.surname == ""
    - item.ansible_facts.username not in existing_user_list.stdout_lines
    - item.ansible_facts.id_number != ""
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Add users for other services:
#   - email
#
# ==================================================================================================
- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.ansible_facts.username }}" "{{ item.ansible_facts.password }}"
  loop: "{{ __domain_users }}"
  ignore_errors: yes
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
    - item.ansible_facts.username not in existing_user_list.stdout_lines
    - item.ansible_facts.id_number == ""
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Set expiry for Samba Users
  shell: >
    samba-tool user setexpiry "{{ item.ansible_facts.account_expire }}" "{{ item.ansible_facts.username }}"
  become: yes
  loop: "{{ __domain_users }}"
  when:
    - inventory_hostname == __samba_schema_master
    - item.ansible_facts.account_expire != ""
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Generate user SPNs"
  include: generate_spns.yml
  loop: "{{ __domain_users }}"
  loop_control:
    loop_var: user
  when:
    - __samba_schema_master is defined
    - inventory_hostname == __samba_schema_master
    - user.ansible_facts.spns != ""
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug
