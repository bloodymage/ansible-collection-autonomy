---
- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"    
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/administrator/password"
    __password_lookup: "{{ __password_store_id }}"
  become: no
  when:
    - samba_administrator_password == "password"

- name: Get Samba Groups
  command:
    cmd: "samba-tool group list"
  register: existing_group_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes

- name: Print Existing Groups
  ansible.builtin.debug:
    var: existing_group_list.stdout_lines
    verbosity: 1
  become: no
  tags:
    - never
    - debug

- name: Get Samba Users
  command:
    cmd: "samba-tool user list"
  register: existing_user_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes

- name: Print Existing Groups
  ansible.builtin.debug:
    var: existing_user_list.stdout_lines
    verbosity: 1
  become: no
  tags:
    - never
    - debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: "Add Unix Samba Groups (Without email address)"
  shell: >
    samba-tool group add "{{ __groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ rebeldream_org_unit_name | upper }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users + __domain_system_users }}"
  vars:
    __username: "{{ item.username | default(item.groupname) }}_g"
    __groupname: "{{ item.groupname | default(__username) }}"
  when:
    - item.id_number is defined
    - inventory_hostname == __samba_schema_master
    - __groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

- name: Add Unix Samba Groups (With email address)
  shell: >
    samba-tool group add "{{ __groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ rebeldream_org_unit_name | upper }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users + __domain_system_users }}"
  vars:
    __username: "{{ item.username | default(item.groupname) }}_g"
    __groupname: "{{ item.groupname | default(__username) }}"
  when:
    - item.id_number is defined
    - inventory_hostname == __samba_schema_master
    - __groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

- name: Add Non-Unix Samba Groups (with Email Address)
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users + __domain_system_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

- name: Add Non-Unix Samba Groups (without Email Address)
  shell: >
    samba-tool group add "{{ item.groupname }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users + __domain_system_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == __samba_schema_master
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Add Samba Users
  command:
    cmd: >
      samba-tool user create "{{ __username }}" "{{ __password }}"
      --unix-home "/home/{{ rebeldream_org_unit_name | upper }}/{{ __username }}"
      --uid-number "{{ item.id_number }}"
      --gid-number "{{ item.id_number }}"
      --given-name "{{ item.given_name }}"
      --surname "{{ item.surname }}"
      --login-shell "{{ item.login_shell | default ('/bin/bash') }}"
      --nis-domain "{{ rebeldream_org_unit_name | upper }}"
      --mail-address "{{ __username }}@{{ samba_email_domain }}"
      --username Administrator
      --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_users + __domain_system_users }}"
  vars:
    __username: "{{ item.username | default(item.given_name | lower) }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ __username }}/password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __id_number: "{{ item.id_number }}"
    __uid_number: "--uid-number '{{ item.id_number }}'"
    __gid_number: "--gid-number '{{ item.id_number }}'"
  when:
    - item.given_name is defined
    - item.surname is defined
    - item.id_number is defined
    - __username not in existing_user_list.stdout_lines
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

- name: Add Samba Users
  shell: >
    samba-tool user create "{{ __username }}" "{{ __password }}"
    --unix-home "/home/{{ rebeldream_org_unit_name | upper }}/{{ __username }}"
    --uid-number "{{ item.id_number }}"
    --gid-number "{{ item.id_number }}"
    --given-name "{{ item.given_name }}"
    --login-shell "{{ item.login_shell | default ('/bin/bash') }}"
    --nis-domain "{{ rebeldream_org_unit_name | upper }}"
    --mail-address "{{ __username }}@{{ samba_email_domain }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_users + __domain_system_users }}"
  vars:
    __username: "{{ item.username }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ __username }}/password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __id_number: "{{ item.id_number }}"
    __uid_number: "--uid-number '{{ item.id_number }}'"
    __gid_number: "--gid-number '{{ item.id_number }}'"
  when:
    - item.given_name is defined
    - item.surname is not defined
    - item.username not in existing_user_list.stdout_lines
    - item.id_number is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

# ==================================================================================================
#
# Add users for other services:
#   - email
#
# Can this be done with 'ldap_entry' instead?
#
# ==================================================================================================
- name: Add Samba Users
  ansible.builtin.shell: >
    samba-tool user create "{{ __username }}" "{{ __password }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  loop: "{{ domain_users + __domain_system_users }}"
  ignore_errors: yes
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  become: yes
  vars:
    __username: "{{ item.username }}"
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ __username }}/password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - item.username not in existing_user_list.stdout_lines
    - item.id_number is not defined

- name: "Set expiry for Samba Users"
  ansible.builtin.command:
    cmd: >
      samba-tool user setexpiry "{{ item.account_expire }}" "{{ item.username }}"
      --username Administrator
      --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_users + __domain_system_users }}"
  when:
    - inventory_hostname == __samba_schema_master
    - item.account_expire is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

- name: "Set Group Membership"
  include: group_membership.yml
  loop: "{{ domain_groups }}"
  loop_control:
    loop_var: group
    index_var: group_index
  when:
    - __samba_schema_master is defined
    - inventory_hostname == __samba_schema_master
    - group.group_members is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes

# ==================================================================================================
#
# Conceptually this works to update the users ldap attributes.  The problem is, I wish to be able to
# update the attribute if it is defined.  Otherwise, I don't want it to do anything.  One possible
# option is to do a nested look "loop: {{ domain_users | product(attributes) }}" then check if that
# attribute is defined for that user, and if yes, update it.  That's not very efficient though.
#
# ==================================================================================================
# - name: "Insert User LDAP Attributes"
#   community.general.ldap_attrs:
#     dn: "CN={{ __dn }},{{ rebeldream_user_dn }}"
#     attributes:
#       #company: "{{ item.company | default(none) }}"
#       #gidNumber: "{{ item.id_number | default(none) }}"
#       #givenName: "{{ __given_name }}"
#       #initials: "{{ __given_name[0] | default(none) }}{{ item.middle_name[0] | default(none) }}{{ item.surname[0] | default(none) }}"
#       #mail: "{{ __mail }}"
#       #mobile: "{{ item.mobile | default(none) }}"
#       #sn: "{{ item.surname }}"
#       #title: "{{ item.job_title | default(none) }}"
#       #uidNumber: "{{ item.id_number | default(none) }}"
#       #unixHomeDirectory: "/home/{{ rebeldream_org_unit_name | upper }}/{{ item.username }}"
#       userCertificate: []
#       #wWWHomePage: "{{ item.internet_address | default(none) }}"
#     state: exact
#     bind_dn: "cn=administrator,{{ rebeldream_user_dn }}"
#     bind_pw: "{{ samba_administrator_password }}"
#     start_tls: yes
#     server_uri: "ldap://{{ rebeldream_fqdn }}"
#   loop: "{{ domain_users }}"
#   vars:
#     __default_mail: "{{ item.username }}@{{ rebeldream_root_domain }}"
#     __mail: "{{ item.mail | default(__default_mail) }}"
#     __given_name: "{{ item.given_name  | default(item.username) }}"
#     __surname: "{{ item.surname | default(none) }}"
#     __sn: "{% if item.surname is defined %}cn: {{ item.surname }}{% endif %}"
#     __dn: "{{ __given_name }}{% if item.surname is defined %} {{ __surname }}{% endif %}"
#   when:
#     - item.id_number is defined
