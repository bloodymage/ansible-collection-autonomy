---
- name: Determine whether to force domain recreation
  ansible.builtin.set_fact:
    __samba_recreate_realm: yes
  become: no
  tags:
    - never
    - recreate-realm

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ groups['samba_domain_controllers'][0] }}"
  become: no
  when:
    - __samba_recreate_realm
  tags:
    - never
    - recreate-realm
    - recreate-realm-debug

- name: Set Samba Schema Master For Realm Recreation
  command:
    cmd: "samba-tool fsmo show"
  register: __samba_schema_master_role
  run_once: yes
  become: yes
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] }}"
    verbosity: 1
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[0] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[2] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3] }}"
    verbosity: 2
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines[0]
    verbosity: 3
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master_list:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] | lower }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ __samba_schema_master_list | join('.') }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug

- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=42 nosymbols=true') }}"
  vars:
    password_store_id: "{{ ansible_domain }}/domain_users/administrator/password"
  when:
    - samba_administrator_password == "password"
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Get Samba Groups
  command: "samba-tool group list"
  register: existing_group_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Existing Groups
  debug:
    var: existing_group_list.stdout_lines
    verbosity: 1
  tags:
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm-debug

- name: Get Samba Users
  command: "samba-tool user list"
  register: existing_user_list
  delegate_to: "{{ __samba_schema_master }}"
  become: yes
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Existing Groups
  debug:
    var: existing_user_list.stdout_lines
    verbosity: 1
  tags:
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - item.id_number is defined
    - inventory_hostname == primary_domain_controller
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --gid-number {{ item.id_number }}
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - item.id_number is defined
    - inventory_hostname == primary_domain_controller
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    --mail-address {{ item.mail_address }}
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == primary_domain_controller
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Groups
  shell: >
    samba-tool group add "{{ item.groupname }}"
    -U Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_groups + domain_users }}"
  when:
    - item.groupname is defined
    - inventory_hostname == primary_domain_controller
    - item.groupname not in existing_group_list.stdout_lines
    - item.mail_address is not defined
    - item.id_number is not defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.username }}" "{{ item.password }}"
    --unix-home "/home/{{ ansible_domain.split('.')[0] }}/{{item.username }}"
    --uid-number "{{ item.id_number }}"
    --gid-number "{{ item.id_number }}"
    --given-name "{{ item.given_name }}"
    --surname "{{ item.surname }}"
    --login-shell "{{ item.login_shell | default ('/bin/bash') }}"
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address "{{ item.username }}{{ samba_email_domain }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_users }}"
  when:
    - item.given_name is defined
    - item.surname != ""
    - item.username not in existing_user_list.stdout_lines
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.username }}" "{{ item.password }}"
    --unix-home "/home/{{ ansible_domain.split('.')[0] }}/{{item.username }}"
    --uid-number "{{ item.id_number }}"
    --gid-number "{{ item.id_number }}"
    --given-name "{{ item.given_name }}"
    --login-shell "{{ item.login_shell | default ('/bin/bash') }}"
    --nis-domain "{{ ansible_domain.split('.')[0] }}"
    --mail-address "{{ item.username }}{{ samba_email_domain }}"
    --username Administrator
    --password {{ samba_administrator_password }}
  become: yes
  loop: "{{ domain_users }}"
  when:
    - item.given_name is defined
    - item.surname == ""
    - item.username not in existing_user_list.stdout_lines
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Add users for other services:
#   - email
#
# ==================================================================================================
- name: Add Samba Users
  shell: >
    samba-tool user create "{{ item.username }}" "{{ item.password }}"
  become: yes
  loop: "{{ domain_users }}"
  when:
    - inventory_hostname == primary_domain_controller
    - item.username not in existing_user_list.stdout_lines
  delegate_to: "{{ __samba_schema_master }}"
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: Set expiry for Samba Users
  shell: >
    samba-tool user setexpiry "{{ item.account_expire }}" "{{ item.username }}"
  become: yes
  loop: "{{ domain_users }}"
  when:
    - item.account_expire is defined
  delegate_to: "{{ __samba_schema_master }}"
  run_once: yes
  tags:
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Generate user SPNs"
  include: generate_spns.yml
  loop: "{{ domain_users }}"
  loop_control:
    loop_var: user
  when:
    - user.spns is defined
  tags:  
    - samba_domain_users
    - samba-domain-users
    - samba_domain_users_debug
    - samba-domain-users-debug
    - recreate-realm
    - recreate-realm-debug
