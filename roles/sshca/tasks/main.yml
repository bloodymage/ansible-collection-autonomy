---
# ==================================================================================================
#
# Tasks:
#  
#
# ==================================================================================================
- name: "Pre-tasks"
  block:
    - name: Include OS-specific variables.
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ ansible_network_os | default(none) }}.yml"
            - "{{ ansible_distribution | lower }}.yml"
            - "{{ ansible_distribution.split(' ')[0] | lower }}.yml"
            - "{{ ansible_os_family | lower }}_family.yml"
            - "{{ ansible_system | lower }}.yml"
            - main.yml
          paths:
            - "vars"
      become: no
      tags:
        - sshca
        - sshca_debug
        - sshca-debug
        - install-packages

    - name: "Install packages"
      ansible.builtin.package:
        name: "{{ packages }}"
        state: present
      become: yes
      delegate_to: localhost
      run_once: yes
      tags:
        - sshca
        - sshca_debug
        - sshca-debug
        - install-packages

# ==================================================================================================
#
# Create a CA key directory
#  
#
# ==================================================================================================
- name: Create CA key directory
  ansible.builtin.file:
    path: "{{ sshca_key_directory }}"
    state: directory
    mode: '0700'
  delegate_to: localhost
  run_once: yes
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

# ==================================================================================================
#
# Generate Passwords if they don't exist
#
# ==================================================================================================
- name: "Ensure we have a password for the Host CA Key"
  ansible.builtin.set_fact:
    sshca_host_key_password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=42 nosymbols=true') }}"
  vars:
    password_store_id: "{{ rebeldream_org_name }}_common/sshca/sshca_host_key_password"
  delegate_to: localhost
  run_once: yes
  when:
    - sshca_host_key_password == "password"
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

- name: "Ensure we have a password for the User CA Key"
  ansible.builtin.set_fact:
    sshca_host_key_password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=42 nosymbols=true') }}"
  vars:
    password_store_id: "{{ rebeldream_org_name }}_common/sshca/sshca_user_key_password"
  delegate_to: localhost
  become: no
  when:
    - sshca_user_key_password == "password"
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

# ==================================================================================================
#
# Generate Host CA key
#
# Notes:
#
# 1. Looked at openssh_keypair module
#    The module does not allow for using passwords
#
# 2. "echo -e 'n' |" is added because ssh-keygen will ask to overwrite
#    the file if it already exists.  'n' for No 'y' for Yes
#
# ==================================================================================================
# - name: Generate Host CA keys
#   openssh_keypair:
#     path: "{{ sshca_key_directory }}/{{ sshca_host_keyfile }}"
#     type: "{{ sshca_host_key_type }}"
#     comment: "{{ sshca_host_key_comment }}"
#     new_passphrase: "{{ sshca_host_key_password }}"
#   tags:
#     - sshca
#     - sshca_debug
#     - sshca-debug

- name: Generate Host CA keys
  command: ssh-keygen -t "{{ sshca_host_key_type }}"
             -f "{{ sshca_key_directory }}/{{ sshca_host_keyfile }}"
             -C "{{ sshca_host_key_comment }}"
             -N "{{ sshca_host_key_password }}"
  args:
    creates: "{{ sshca_key_directory }}/{{ sshca_host_keyfile }}"
  #no_log: true
  delegate_to: localhost
  become: no
  tags:
    - sshca
    - sshca_debug
    - sshca-debug

# ==================================================================================================
#
# Generate User CA key
#
# ==================================================================================================
- name: Generate User CA key
  command: ssh-keygen -t "{{ sshca_user_key_type }}"
             -f "{{ sshca_key_directory }}/{{ sshca_user_keyfile }}"
             -C "{{ sshca_user_key_comment }}"
             -N "{{ sshca_user_key_password }}"
  args:
    creates: "{{ sshca_key_directory }}/{{ sshca_user_keyfile }}"
  no_log: true
  delegate_to: localhost
  become: no
  tags:
    - sshca
    - sshca_debug
    - sshca-debug
