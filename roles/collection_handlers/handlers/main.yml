---
# handlers file for collection_handlers
# ==================================================================================================
#
# Misc Handlers
#
# ==================================================================================================
# ==================================================================================================
#
# Update System CA Certificates
#
# Because handlers are run in order, we want this at the top to ensure all certs are properly
# installed before restarting the services below.
#
# ==================================================================================================
- name: "Update System CA Certificates."
  ansible.builtin.command:
    cmd: "update-ca-certificates"
  become: yes
  listen:
    - "update system ca certificates"
    - "update ca-certificates"
    - "restart all"
    - "restart tls"
    - "reload tls"

- name: "Update nextcloud certificates."
  include_tasks: nextcloud_certificates.yml
  listen:
    - "update nextcloud certificates"

# ==================================================================================================
#
#
#
# ==================================================================================================
# TODO: Update this command to update pam config.
- name: Update PAM
  ansible.builtin.command:
    cmd: "update-ca-certificates"
  become: yes
  listen:
    - "update pam"

- name: "Reset Samba ACLs on Sysvol for New Controller."
  ansible.builtin.command:
    cmd: "samba-tool ntacl sysvolreset"
  become: yes
  listen:
    - "sysvolreset"

# ==================================================================================================
#
# Disable for now.  This may no longer be needed.
# Disabled because '/var/spool/postfix/etc/ssl' directory no longer exists.
#
# TODO: Need to investigate change in debian postfix package.
#
# ==================================================================================================
# - name: "postfix tls"
#   ansible.builtin.copy:
#     src: /etc/ssl/certs/ca-certificates.crt
#     dest: /var/spool/postfix/etc/ssl/certs/ca-certificates.crt
#     owner: root
#     group: root
#     mode: "0644"
#     remote_src: yes
#   become: yes
#   notify: reload postfix
#   listen:
#     - "update system ca certificates"
#     - "update ca-certificates"
#     - "restart tls"
#     - "reload tls"
#   when:
#     - inventory_hostname in groups['postfix_servers'] | default([])

- name: "Force systemd to reread configs."
  ansible.builtin.systemd:
    scope: system
    daemon_reload: yes
  become: yes
  listen:
    - "daemon reload"

# ==================================================================================================
#
# Restart Service Handlers
#
# ==================================================================================================
- name: "Restart Apache"
  ansible.builtin.service:
    name: apache2
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart apache"
    - "restart keytab"
  when:
    - inventory_hostname in groups['apache_servers'] | default([])

# TODO: Check if this needs 'restart tls'
- name: "Restart Bind9"
  ansible.builtin.service:
    name: named
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart bind"
    - "restart bind9"
    - "restart tls"
    - "restart named"
  when:
    - inventory_hostname in groups['dns_servers'] | default([])

- name: restart cron
  ansible.builtin.service:
    name: "{{ ntp_cron_daemon }}"
    state: restarted
  when: ntp_cron_handler_enabled | bool

- name: "Restart DDclient."
  service:
    name: ddclient
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart ddclient"

- name: "Restart Dovecot."
  ansible.builtin.service:
    name: dovecot
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart keytab"
    - "restart dovecot"
  when:
    - inventory_hostname in groups['dovecot_servers'] | default([])

- name: "Restart Freeradius."
  ansible.builtin.service:
    name: freeradius
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart freeradius"
  when:
    - inventory_hostname in groups['freeradius_servers'] | default([])

- name: "Restart Keycloak."
  ansible.builtin.service:
    name: keycloak
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart keycloak"
    - "restart keytab"
  when:
    - inventory_hostname in groups['keycloak_servers'] | default([])

- name: "Restart Mosquitto"
  ansible.builtin.service:
    name: mosquitto
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart mosquitto"
  when:
    - inventory_hostname in groups['mosquitto_servers'] | default([])

- name: "Restart MySQL"
  ansible.builtin.service:
    name: mysql
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart mysql"
  when:
    - inventory_hostname in groups ['mysql_compatable_servers'] | default([])

- name: "Restart nginx"
  ansible.builtin.service:
    name: nginx
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart nginx"
  when:
    - inventory_hostname in groups ['nginx_servers'] | default([])

- name: restart ntp
  ansible.builtin.service:
    name: "{{ ntp_daemon }}"
    state: restarted
  when: ntp_enabled | bool

- name: "Restart OpenDKIM."
  ansible.builtin.service:
    name: opendkim
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart opendkim"
  when:
    - inventory_hostname in groups['opendkim_servers'] | default([])

- name: "Restart Postfix"
  ansible.builtin.service:
    name: postfix
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart keytab"
    - "restart postfix"
  when:
    - inventory_hostname in groups['postfix_servers'] | default([])

- name: "Restart Samba Domain Controller"
  ansible.builtin.service:
    name: samba-ad-dc
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart samba-ad-dc"
    - "restart samba"
  when:
    - inventory_hostname in groups['samba_domain_controllers'] | default([])

- name: "Restart SMBD Server"
  ansible.builtin.service:
    name: smbd
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart samba file server"
    - "restart samba"
  when:
    - inventory_hostname in groups['samba_file_servers'] | default([])

- name: "Restart NMBD Server"
  ansible.builtin.service:
    name: nmbd
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart samba file server"
    - "restart samba"
  when:
    - inventory_hostname in groups['samba_file_servers'] | default([])

- name: "Restart SSH Server"
  ansible.builtin.service:
    name: ssh
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart ssh"

- name: "Restart Winbind Server"
  ansible.builtin.service:
    name: winbind
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart samba file server"
    - "restart samba"
    - "restart winbind"
  when:
    - inventory_hostname in groups['samba_file_servers'] | default([])

- name: "Restart sssd."
  ansible.builtin.service:
    name: sssd
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart tls"
    - "restart sssd"
  when:
    - inventory_hostname in groups['sssd'] | default([])

- name: "Restart unattended-upgrades"
  ansible.builtin.service:
    name: unattended-upgrades
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart unattended-upgrades"

- name: "Restart Spamassassin."
  ansible.builtin.service:
    name: spamassassin
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart spamassassin"
  when:
    - inventory_hostname in groups['mail_servers'] | default([])

- name: "Restart Spamass-Milter."
  ansible.builtin.service:
    name: spamass-milter
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart spamassassin"
    - "restart spamass-milter"
  when:
    - inventory_hostname in groups['mail_servers'] | default([])

- name: "Restart UptimeD"
  ansible.builtin.service:
    name: uptimed
    state: restarted
  become: yes
  listen:
    - "restart all"
    - "restart uptimed"

# ==================================================================================================
#
# Reload Handlers
#
# ==================================================================================================
- name: "Reload Apache."
  ansible.builtin.service:
    name: apache2
    state: reloaded
  become: yes
  listen:
    - "reload all"
    - "reload tls"
    - "reload apache"
  when:
    - inventory_hostname in groups['apache_servers'] | default([])

- name: "reload nginx"
  ansible.builtin.service:
    name: nginx
    state: reloaded
  become: yes
  listen:
    - "reload all"
    - "reload tls"
    - "reload nginx"
  when:
    - inventory_hostname in groups['nginx_servers'] | default([])

- name: "Reload Postfix."
  ansible.builtin.service:
    name: postfix
    state: reloaded
  become: yes
  listen:
    - "reload all"
    - "reload tls"
    - "reload postfix"
  when:
    - inventory_hostname in groups['postfix_servers'] | default([])

- name: "Reload Samba Domain Controller"
  ansible.builtin.service:
    name: samba-ad-dc
    state: restarted
  become: yes
  listen:
    - "reload all"
    - "reload tls"
    - "reload samba-ad-dc"
  when:
    - inventory_hostname in groups['samba_domain_controllers'] | default([])

# ==================================================================================================
#
# Start Handlers
#
# ==================================================================================================
- name: "Start Samba Domain Controller"
  ansible.builtin.service:
    name: samba-ad-dc
    state: started
  become: yes
  listen:
    - "start samba-ad-dc"
  when:
    - inventory_hostname in groups['samba_domain_controllers'] | default([])

- name: "Start SSSD."
  ansible.builtin.service:
    name: sssd
    state: started
  become: yes
  listen:
    - "start sssd"
  when:
    - inventory_hostname in groups['sssd'] | default([])

# ==================================================================================================
#
# Enable Handlers
#
# ==================================================================================================
- name: "Enable Keycloak."
  ansible.builtin.service:
    name: "keycloak"
    state: "{{ item }}"
  loop:
    - enabled
    - started
  become: yes
  listen:
    - "enable keycloak"
  when:
    - inventory_hostname in groups['keycloak_servers'] | default([])

# ==================================================================================================
#
# Enable emacs user systemd service
#
# TODO: Fixme
#
# Error: cannot connect to bus
#
# ==================================================================================================
- name: "Enable User emacs daemon."
  ansible.builtin.systemd:
    name: emacs.service
    enabled: yes
    scope: user
  become: yes
  become_user: "{{ item.username }}"
  become_method: machinectl
  loop: "{{ users }}"
  listen:
    - "enable emacs"

# ==================================================================================================
#
# Reboot, shutdown handlers.
#
# We want to be very careful with these handlers.  Because handlers run in the order they are found
# within this file, we want these at the very end.
#
# Further checks to be absolutely certain we wish to do this need to be added.
#
# ==================================================================================================
# ==================================================================================================
#
# I really want to have this reboot the system is necessary.  I haven't convinced myself to actually
# try it yet.
#
# TODO: Change become from 'no' to 'yes' when I change this from debug to reboot modules.
#
# ==================================================================================================
- name: "Reboot Hosts if /var/run/reboot-required exists"
  #ansible.builtin.reboot:
  ansible.builtin.debug:
    msg: "Rebooting {{ inventory_hostname }} (Pretend)"
  when:
    - reboot_required_file.stat.exists
  become: no
  listen:
    - "reboot"

# ==================================================================================================
#
# OwnCA Handlers
#
# ==================================================================================================
- name: "Regenerate intermediate CA certificate."
  ansible.builtin.set_fact:
    __ownca_force_regenerate_intermediate_ca: yes
  become: no
  listen:
    - "regenerate certificates"
    - "regenerate intermediate ca certificates"

- name: "Regenerate issuing CA certificate."
  ansible.builtin.set_fact:
    __ownca_force_regenerate_issuing_ca: yes
  become: no
  listen:
    - "regenerate certificates"
    - "regenerate issuing ca certificates"

- name: "Regenerate user certificates."
  ansible.builtin.set_fact:
    __user_cert_force_regeneration: yes
  become: no
  listen:
    - "regenerate certificates"
    - "regenerate user certificates"

- name: "Regenerate host certificates."
  ansible.builtin.set_fact:
    __host_cert_force_regeneration: yes
  become: no
  listen:
    - "regenerate certificates"
    - "regenerate host certificates"
