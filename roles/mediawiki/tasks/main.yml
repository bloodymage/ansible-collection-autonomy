---
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - websites
    - install-packages

- name: "Check to determine if we need krb5 support"
  ansible.builtin.set_fact:
    packages: "{{ packages + [ mediawiki_krb5_packages ] }}"
  become: no
  when:
    - rebeldream_realm_identity_management_system is truthy
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have a password for the database user"
  ansible.builtin.set_fact:
    mediawiki_db_password: "{{ lookup('community.general.passwordstore', __password_store_id + ' create=true length=' + __password_length + ' nosymbols=true ' + __password_overwrite) }}"
  vars:
    __password_store_id: "{{ rebeldream_domain }}/services/mysql/wikiuser"
    __password_length: "{{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
  become: no
  when:
    - mediawiki_db_password == "password"
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - websites

# ==================================================================================================
#
# This is a little different from other roles when we install packages for that role.
#
# We only want to install packages on servers that have a virtual host containing mediawiki.  This
# ensure we do not install on other webservers that do not have mediawiki.
#
# ==================================================================================================
- name: "Install packages"
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  loop: "{{ hosts }}"
  become: yes
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - websites
    - install-packages

# ==================================================================================================
#
# The conditional needs work.
#
# I need it to enable the modules in mediawiki_apache_modules, but only if one of the virtual hosts
# is a mediawiki website.
#
# ==================================================================================================
- name: "Enable Apache Modules"
  community.general.apache2_module:
    state: present
    name: "{{ item }}"
  loop: "{{ mediawiki_apache_modules }}"
  become: yes
  when:
    - hosts is defined
    - inventory_hostname in groups['apache_servers']
  notify: restart apache
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - websites

- name: "Install Mediawiki Site"
  ansible.builtin.git:
    repo: "https://gerrit.wikimedia.org/r/mediawiki/core.git"
    dest: "/srv/www/{{ item.name }}/w"
    force: yes
    depth: 1
    version: "{{ mediawiki_version }}"
    track_submodules: yes
  become: yes
  become_user: www-data
  loop: "{{ hosts }}"
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

- name: "Fetch External Libraries"
  community.general.composer:
    command: update
    no-dev: yes
    working_dir: "/srv/www/{{ item.name }}/w"
  become: yes
  become_user: www-data
  loop: "{{ hosts }}"
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

- name: "Include mediawiki extension task"
  include: mediawiki_extensions.yml
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  become: no
  when:
    - hosts is defined
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

# ==================================================================================================
#
# TODO: Update this to fully qualified collection name
#
# As of ansible 2.10.3 this fails with the fully qualified collection name:
# - ansible.builtin.command
#
# ==================================================================================================
- name: "Update Extensions"
  command:
    cmd: "git submodule update --init --recursive"
    chdir: "/srv/www/{{ item.name }}/w/extensions"
  loop: "{{ hosts }}"
  become: yes
  become_user: www-data
  register: success
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

- name: "Install Additional mediawiki skins"
  include: mediawiki_skins.yml
  loop: "{{ hosts }}"
  loop_control:
    loop_var: host
  become: no
  when:
    - hosts is defined
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

# ==================================================================================================
#
# TODO: Update this to fully qualified collection name
#
# As of ansible 2.10.3 this fails with the fully qualified collection name:
# - ansible.builtin.command
#
# ==================================================================================================
- name: "Update Mediawiki Skins"
  command:
    cmd: "git submodule update --init --recursive"
    chdir: "/srv/www/{{ item.name }}/w/skins"
  become: yes
  become_user: www-data
  loop: "{{ hosts }}"
  register: success
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-install
    - websites

- name: "Create ldap.json"
  ansible.builtin.template:
    src: "ldap.json.j2"
    dest: "/srv/www/{{ item.name }}/w/ldap.json"
    owner: www-data
    group: www-data
    mode: "0644"
  become: yes
  loop: "{{ hosts }}"
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
    - mediawiki_ldap_config
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-config
    - websites

- name: "Update LocalSettings.php"
  ansible.builtin.template:
    src: "mediawiki_settings.php.j2"
    dest: "/srv/www/{{ item.name }}/w/LocalSettings.php"
    owner: www-data
    group: www-data
    mode: "0644"
  become: yes
  loop: "{{ hosts }}"
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki-config
    - mediawiki_debug
    - mediawiki-debug
    - websites

# ==================================================================================================
#
# TODO: Update this to fully qualified collection name
#
# As of ansible 2.10.3 this fails with the fully qualified collection name:
# - ansible.builtin.command
#
# ==================================================================================================
- name: "Update Mediawiki Database"
  command:
    cmd: "php maintenance/update.php"
    chdir: "/srv/www/{{ item.name }}/w"
  become: yes
  become_user: www-data
  loop: "{{ hosts }}"
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-config
    - websites

- name: "Update Apache Sites-Available .conf"
  ansible.builtin.template:
    src: "apache-site.conf.j2"
    dest: "/etc/apache2/sites-available/{{ item.name }}.conf"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ hosts }}"
  become: yes
  when:
    - hosts is defined
    - item.content is defined
    - item.content == "mediawiki"
    - item.enabled is defined
    - item.enabled
  notify: reload apache
  tags:
    - mediawiki
    - mediawiki_debug
    - mediawiki-debug
    - mediawiki-config
    - websites
