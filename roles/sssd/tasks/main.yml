---
# tasks file for sssd
# ==================================================================================================
#
# Task: Install apps
#
# ==================================================================================================
# - name: "Set default domain recreation variable to 'no'"
#   ansible.builtin.set_fact:
#     __samba_recreate_realm: yes
#   become: no
#   tags:
#     - always

- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  become: yes
  notify: restart sssd

- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  become: no
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/administrator/password"
    __password_lookup: "{{ __password_store_id }}"
  when:
    - samba_administrator_password == "password"
  no_log: yes

  # Check for existing AD
- name: Checking to see if system is already joined to AD
  ansible.builtin.command: /bin/bash -c "/usr/sbin/realm list"
  register: realm_list_results

- name: Debug realm_list_results
  ansible.builtin.debug:
    msg: "{{ realm_list_results.stdout }}"
    verbosity: 1
  tags:
    - never
    - debug

- name: "stop sssd"
  service:
    name: sssd
    state: stopped
  become: yes
  when:
    - __samba_recreate_realm
    - realm_list_results.stdout is defined
    - realm_list_results.stdout is truthy

- name: "Leave Realm"
  ansible.builtin.command:
    cmd: "realm leave"
  become: yes
  when:
    - __samba_recreate_realm
    - realm_list_results.stdout is defined
    - realm_list_results.stdout is truthy

- name: Checking to see if system still joined to AD
  command: /bin/bash -c "/usr/sbin/realm list"
  register: realm_list_results
  when:
    - __samba_recreate_realm

- name: Debug realm_list_results
  ansible.builtin.debug:
    msg: "{{ realm_list_results.stdout }}"
    verbosity: 1
  when:
    - __samba_recreate_realm
  tags:
    - never
    - debug

- name: Clear old data
  ansible.builtin.file:
    path: "/var/lib/sss/{{ item }}"
    state: absent
  loop:
    - db
    - mc
  become: yes
  when:
    - __samba_recreate_realm

- name: Ensure DB directory exists
  ansible.builtin.file:
    path: "/var/lib/sss/{{ item }}"
    state: directory
    owner: sssd
    group: sssd
    mode: "0755"
  loop:
    - db
    - mc
  become: yes
  when:
    - __samba_recreate_realm

- name: "Test Kerberos Logon to Active Directory Domain Controller"
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  when:
    - realm_list_results.stdout is defined
    - realm_list_results.stdout is falsy

- name: Join Realm
  expect:
    command: /bin/bash -c "/usr/sbin/realm join {{ rebeldream_domain }} --user=Administrator"
    responses:
      (?i)Password: "{{ samba_administrator_password }}"
  ignore_errors: yes
  become: yes
  when:
    - realm_list_results.stdout is defined
    - realm_list_results.stdout is falsy

- name: "Install sssd.conf"
  ansible.builtin.template:
    src: "{{ role_path }}/templates/sssd.conf.j2"
    dest: "/etc/sssd/sssd.conf"
    owner: root
    group: root
    mode: "0600"
  become: yes
  notify: restart sssd

- name: "Ensure pam_preauth_available file exists"
  ansible.builtin.file:
    path: "/var/lib/sss/pubconf/pam_preauth_available"
    owner: "root"
    group: "root"
    mode: "0600"
    state: touch
  become: yes
  notify: restart sssd
  when:
    - rebeldream_smart_card_login

- name: "Set variables for pam sss config"
  ansible.builtin.set_fact:
    sssd_pam_priority: "900"
    sssd_pam_auth_initial: "pam_sss.so allow_missing_name try_cert_auth forward_pass"
  become: no
  when:
    - rebeldream_smart_card_login
    - inventory_hostname in groups['workstations']

- name: "Install /usr/share/pam-configs/sss"
  ansible.builtin.template:
    src: "pam-sss.j2"
    dest: "/usr/share/pam-configs/sss"
    owner: root
    group: root
    mode: "0644"
  become: yes
  #notify: pam-auth-update
