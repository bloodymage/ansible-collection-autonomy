---
# ==================================================================================================
#
# Create groups based on OS information.
#
# ==================================================================================================
- name: "Create groups based on the Network OS"
  ansible.builtin.group_by:
    key: "{{ ansible_network_os.split('.')[2] | lower }}"
  when:
    - ansible_network_os is defined
  changed_when: False

- name: "Create groups based on the OS Family"
  ansible.builtin.group_by:
    key: "{{ ansible_os_family | lower }}"
  when:
    - ansible_os_family is defined
  changed_when: False

- name: "Create groups based on the System"
  ansible.builtin.group_by:
    key: "{{ ansible_system | lower }}"
  when:
    - ansible_system is defined
  changed_when: False

# ==================================================================================================
#
# Create groups based on zone information.
#
# =================================================================================================
- name: "Create group by zone type."
  ansible.builtin.group_by:
    key: "{{ autonomy_zone_type }}_zone"
  changed_when: False

- name: "Create group by zone name."
  ansible.builtin.group_by:
    key: "{{ autonomy_zone_name }}_zone"
  when:
    - autonomy_zone_name is defined
  changed_when: False

# ==================================================================================================
#
# In some places we need the same group as above, without the "_zone" on the end.
#
# ==================================================================================================
- name: "Create group by zone name."
  ansible.builtin.group_by:
    key: "{{ autonomy_zone_name }}"
  when:
    - autonomy_zone_name is defined
  changed_when: False

# ==================================================================================================
#
# Now we create groups based on the host's role
#
# ==================================================================================================
- name: "Create parent groups based on host's role."
  ansible.builtin.group_by:
    key: "{{ item.parent }}"
  loop: "{{ autonomy_parent_groups }}"
  when:
    - item.parent is defined
    - inventory_hostname in groups[item.name] | default([])
  changed_when: False

# ==================================================================================================
#
# We run this a second time because groups that were created by the previous task won't create
# parent groups based on the newly added groups.
#
# For example:
# postfix_servers will create smtp_servers group in the previous task.  We need smtp_servers to be
# part of the 'mail_servers' group.  The previous task won't add smtp_servers to the mail_servers
# group, so we run it a second time.
#
# ==================================================================================================
- name: "Create parent groups based on host's role."
  ansible.builtin.group_by:
    key: "{{ item.parent }}"
  loop: "{{ autonomy_parent_groups }}"
  when:
    - item.parent is defined
    - inventory_hostname not in groups[item.parent] | default([])
    - inventory_hostname in groups[item.name] | default([])
  changed_when: False

- name: "Create host groups based on zone name and role."
  ansible.builtin.group_by:
    key: "{{ autonomy_zone_name }}_{{ item.name }}"
  loop: "{{ autonomy_parent_groups }}"
  when:
    - inventory_hostname in groups[item.name] | default([])
  changed_when: False

- name: "Create host groups based on zone type and role."
  ansible.builtin.group_by:
    key: "{{ autonomy_zone_type }}_{{ item.name }}"
  loop: "{{ autonomy_parent_groups }}"
  when:
    - inventory_hostname in groups[item.name] | default([])
  changed_when: False

- name: "Create virtual_hosts group."
  ansible.builtin.group_by:
    key: "virtual_hosts"
  when:
    - autonomy_virtual_host
  changed_when: False

- name: "Include Samba Domain Tasks"
  include_tasks: "samba_domain.yml"
  when:
    - groups['samba_domain_controllers'] is defined

- name: "Include OS Based Tasks"
  include_tasks: "{{ ansible_system | lower }}.yml"
  vars:
    __ansible_system: "{{ ansible_system | lower }}"
  when:
    - ansible_system is defined
    - inventory_hostname in groups[__ansible_system] | default([])

# ==================================================================================================
#
# Now we need to identify who is running ansible.
#
# TODO: Test if this Can be set "run_once" and "delegate_to: localhost"
#
# ==================================================================================================
- name: "Identify User running ansible."
  ansible.builtin.set_fact:
    autonomy_user: "{{ lookup('env','USER') }}"
  run_once: true
  delegate_to: localhost
  when:
    - autonomy_user == "ansible_autonomy"

#     - name: Check if we are using debug mode
#       ansible.builtin.set_fact:
#         __debug_mode: yes
#         __free_strategy: "debug"
#         __linear_strategy: "debug"
#       become: no
#       tags:
#         - never
#         - debug
#         - debug-mode

- name: "Check if we are using passwords for logon."
  ansible.builtin.set_fact:
    ansible_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - autonomy_use_password_logon is defined
    - autonomy_use_password_logon
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/hosts/{{ ansible_user }}/password"
    __password_length: "length={{ autonomy_password_length }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __private_key_path: "{{ ownca_ca_private_key_directory }}/{{ autonomy_org_name }}-{{ item.name }}-ca.key"
  run_once: true
  delegate_to: localhost


- name: "Set environment configuration complete flag."
  ansible.builtin.set_fact:
    __autonomy_configuration_complete: true
