---
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_network_os | default(none) }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_distribution.split(' ')[0] | lower }}.yml"
        - "{{ ansible_os_family | lower }}_family.yml"
        - "{{ ansible_system | lower }}.yml"
        - default.yml
      paths:
        - "vars"
  become: no
  tags:
    - users
    - users_debug
    - users-debug
    - install-packages

- name: "Install packages"
  package:
    name: "{{ packages }}"
    state: present
  tags:
    - users
    - users_debug
    - users-debug
    - install-packages

# ==================================================================================================
#
# Create users and groups
#
# ==================================================================================================
- name: Create groups
  group:
    name: "{{ item.name }}"
    state: present
    system: "{{ item.system | default('no') }}"
  loop: "{{ user_groups }}"
  when:
    - user_groups is defined
  become: yes
  tags:
    - users
    - users_debug
    - users-debug

- name: Create login users (Password Enabled)
  user:
    name: "{{ item['username'] }}"
    password: "{{ item['password'] | password_hash('sha512') }}"
    groups: "{{ item['groups'] }}"        # Empty by default, here we give it some groups
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: no                         # Defaults to no
    create_home: yes                   # Defaults to yes
    comment: "{{ item['name'] }}"
    home: "{{ item['unix_home'] }}"
    uid:  "{{ item['id_number'] }}"
    update_password: always
    move_home: yes
  with_items: "{{ users }}"
  become: yes
  when:
    - item.password is defined
  tags:
    - users
    - users_debug
    - users-debug

- name: Create login users (Password Disabled)
  user:
    name: "{{ item.username }}"
    groups: "{{ item.groups }}"        # Empty by default, here we give it some groups
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: no                         # Defaults to no
    create_home: yes                   # Defaults to yes
    comment: "{{ item['name'] | default(none) }}"
    home: "{{ item['unix_home'] | default('/nonexistent') }}"
    move_home: yes
    uid:  "{{ item['id_number'] }}"
  loop: "{{ users }}"
  become: yes
  when:
    - item.password is undefined
    - item.id_number is defined
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# User SSH configuration
#
# ==================================================================================================
- name: Create User SSH Keys
  user:
    name: "{{ item['username'] }}"
    generate_ssh_key: yes
    ssh_key_type: "{{ item.ssh_keytype | default('ed25519') }}"
    ssh_key_passphrase: "{{ item['ssh_key_password'] }}"
  loop: "{{ users }}"
  become: yes
  when:
    - item.ssh_key_password is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  tags:
    - users
    - users_debug
    - users-debug

- name: Create SSH Principals file for users
  template:
    src: "ssh_principals.j2"
    dest: "/etc/ssh/auth_principals/{{ item.username }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ users }}"
  when:
    - item.ssh_access_cert is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  become: yes
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# Create login users (Password Enabled)
#
# ...
#
# ==================================================================================================
- name: Setup Sudoers file for user
  template:
    src: "user_sudoers.j2"
    dest: "/etc/sudoers.d/{{ item.username }}"
    owner: root
    group: root
    validate: /usr/sbin/visudo -csf %s
  loop: "{{ users }}"
  become: yes
  when:
    - item.sudoers is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# Delete no longer defined users
#
# ...
#
# ==================================================================================================
# - name: Determine existing users
#   shell: 'grep ansiblemanaged /etc/group | cut -d: -f4 | tr "," "\n"'
#   changed_when: false
#   register: existing_users
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Determine removed users
#   set_fact:
#     removed_users: "{{ existing_users.stdout_lines | difference(users) }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Delete removed user accounts
#   user:
#     name: "{{ item }}"
#     state: absent
#   with_items: "{{ removed_users }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Remove sudoers for remove accounts
#   file:
#     name: "/etc/sudoers.d/{{ item }}"
#     state: absent
#   with_items: "{{ removed_users }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
# - name: Add User SSH keys to gitolite
#   fetch:
#     src: "/home/{{ item.username }}/.ssh/id_ed25519.pub"
#     dest: "~/gitolite-admin/keydir/{{ inventory_hostname }}/{{ item.usename }}.pub"
#   loop: "{{ users }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Add public ssh keys of users
#   authorized_key:
#     user: "{{ item }}"
#     exclusive: yes
#     key: https://github.com/{{ item }}.keys
#     state: present
#   with_items: "{{ developers }}"
