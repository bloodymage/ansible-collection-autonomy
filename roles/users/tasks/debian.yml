---
- name: "Install packages."
  ansible.builtin.package:
    name: "{{ autonomy_packages }}"
    state: present

# ==================================================================================================
#
# Create users and groups
#
# ==================================================================================================
- name: "Ensure we have user groups required by host role."
  ansible.builtin.set_fact:
    __user_groups: "{{ __user_groups + autonomy_user_groups + [ item.group ] }}"
  loop:
    - name: "mythtv"
      group: "{{ user_mythtv_group }}"
    - name: "file_servers"
      group: "{{ user_mythtv_group }}"
    - name: "file_servers"
      group: "{{ user_git_group }}"
    - name: "minidlna_servers"
      group: "{{ user_minidlna_group }}"
    - name: "git_servers"
      group: "{{ user_git_group }}"
    - name: "homeassistant"
      group: "{{ user_homeassistant_group }}"
    - name: "mail_servers"
      group: "{{ user_vmail_group }}"
  when:
    - inventory_hostname in groups [item.name] | default([])
  become: no

- name: "Ensure we have users required by host role."
  ansible.builtin.set_fact:
    __users: "{{ __users + [ item.user ] }}"
  loop:
    - name: "mythtv"
      user: "{{ user_mythtv }}"
    - name: "file_servers"
      user: "{{ user_mythtv }}"
    - name: "file_servers"
      user: "{{ user_git }}"
    - name: "minidlna_servers"
      user: "{{ user_minidlna }}"
    - name: "git_servers"
      user: "{{ user_git }}"
    - name: "homeassistant"
      user: "{{ user_homeassistant }}"
    - name: "mail_servers"
      user: "{{ user_vmail }}"
  when:
    - inventory_hostname in groups[item.name] | default([])
  become: no

- name: "Create groups."
  ansible.builtin.group:
    name: "{{ item.name }}"
    state: present
    system: "{{ item.system | default('no') }}"
    gid: "{{ item.gid | default(omit) }}"
  loop: "{{ __user_groups }}"
  become: yes

# ==================================================================================================
#
# This creates all local users.
#
# The user is added as a member of all groups defined in the user definition.  In addition, the user
# is added to a group 'ansiblemanaged'.  This is to track which users were installed by ansible.
# The end goal is, if a user is a member of the 'ansiblemanaged' group, and that user is no longer
# defined in the user definitions, then remove the user from the local system.
#
# ==================================================================================================
- name: "Create login users (Password Enabled)."
  ansible.builtin.user:
    name: "{{ item['username'] }}"
    password: "{{ __password_hash }}"
    groups: "{{ item['groups'] + [autonomy_user_group_ansible_managed] | default([autonomy_user_group_ansible_managed]) }}"
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: no                         # Defaults to no
    create_home: yes                   # Defaults to yes
    comment: "{{ item['name'] | default(omit) }}"
    home: "{{ item['unix_home'] | default('/nonexistent') }}"
    uid:  "{{ item['id_number'] | default(omit) }}"
    update_password: always
    move_home: yes
  loop: "{{ __users }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/hosts/{{ inventory_hostname_short }}/{{ item.username }}/password"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    __password_hash: "{{ __password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string ) }}" 
  loop_control:
    index_var: index
  become: yes
  when:
    - __users is defined
    - item.id_number is defined
    - item.id_number >= autonomy_user_password_min_id
    - item.id_number <= autonomy_user_password_max_id

- name: "Create login users (Password Disabled)."
  ansible.builtin.user:
    name: "{{ item['username'] }}"
    groups: "{{ item['groups'] + [autonomy_user_group_ansible_managed] | default([autonomy_user_group_ansible_managed]) }}"
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: "{{ item['system'] | default('no') }}"          # Defaults to no
    create_home: yes                                     # Defaults to yes
    comment: "{{ item['name'] | default(none) }}"
    home: "{{ item['unix_home'] | default('/nonexistent') }}"
    move_home: yes
    uid:  "{{ item['id_number'] | default(omit) }}"
  loop: "{{ __users }}"
  loop_control:
    index_var: index
  become: yes
  when:
    - __users is defined
    - user_password_list.results[index].ansible_facts.password is not defined
    - item.username != "root"

# ==================================================================================================
#
# Post configuration
#
# ==================================================================================================
- name: "Create User SSH Keys."
  ansible.builtin.user:
    name: "{{ item['username'] }}"
    generate_ssh_key: yes
    ssh_key_type: "{{ item['ssh_keytype'] | default('ed25519') }}"
    ssh_key_passphrase: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  loop: "{{ __users }}"
  loop_control:
    index_var: index
  become: yes
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/hosts/{{ inventory_hostname_short }}/{{ item['username'] }}/ssh_key_password"
    __password_length: "length={{ item['password_legnth'] | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  when:
    - item.ssh_cert is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")

- name: "Ensure auth_principals directory exists."
  ansible.builtin.file:
    path: "/etc/ssh/auth_principals"
    owner: root
    group: root
    mode: "0755"
    state: directory
  become: yes

- name: "Create SSH Principals file for users."
  ansible.builtin.template:
    src: "ssh_principals.j2"
    dest: "/etc/ssh/auth_principals/{{ item['username'] }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ __users }}"
  become: yes
  when:
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")

# ==================================================================================================
#
# Create login users (Password Enabled)
#
# ...
#
# ==================================================================================================
- name: "Setup Sudoers file for users"
  ansible.builtin.template:
    src: "user_sudoers.j2"
    dest: "/etc/sudoers.d/user_{{ item['username'] }}"
    owner: "root"
    group: "root"
    mode: "0440"
    validate: /usr/sbin/visudo -csf %s
  loop: "{{ __users }}"
  become: yes
  when:
    - item.sudoers is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")

# - name: "Setup Sudoers file for applications"
#   ansible.builtin.template:
#     src: "user_sudoers.j2"
#     dest: "/etc/sudoers.d/application_{{ item.application }}"
#     owner: "root"
#     group: "root"
#     mode: "0440"
#     validate: /usr/sbin/visudo -csf %s
#   loop: "{{ users_sudoers_options }}"
#   become: yes
#   tags:
#     - users
#     - users_debug
#     - users-debug

# ==================================================================================================
#
# Delete no longer defined users
#
# ...
#
# ==================================================================================================
- name: "Identify ansible managed users existing on the system."
  ansible.builtin.shell:
    cmd: >-
      set -o pipefail &&
      grep {{ autonomy_user_group_ansible_managed }} /etc/group |
      cut -d: -f4 |
      tr "," "\n"
    executable: "/bin/bash"
  changed_when: false
  register: existing_users

- name: "Get inventory defined users into a list."
  ansible.builtin.set_fact:
    __username_list: "{{ __username_list + [ item.username ] }}"
  loop: "{{ __users }}"

# This currently fails because it needs a straight list of users.  Currently "users" list each item
# is a dictionary.  Containing user configuration options
- name: "Identify user accounts to be removed."
  ansible.builtin.set_fact:
    __removed_users: "{{ existing_users.stdout_lines | difference(__username_list) }}"

- name: "Delete user accounts to be removed."
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
  loop: "{{ __removed_users }}"
  become: yes

- name: "Remove sudoers for accounts that no longer exist."
  ansible.builtin.file:
    name: "/etc/sudoers.d/{{ item }}"
    state: absent
  loop: "{{ __removed_users }}"
  become: yes

# ==================================================================================================
#
#
#
# ==================================================================================================
# - name: Add Users' SSH keys to gitolite.
#   fetch:
#     src: "/home/{{ item.username }}/.ssh/id_ed25519.pub"
#     dest: "~/gitolite-admin/keydir/{{ inventory_hostname }}/{{ item.usename }}.pub"
#   loop: "{{ users }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Add users' SSH keys to Github.
#   authorized_key:
#     user: "{{ item }}"
#     exclusive: yes
#     key: https://github.com/{{ item }}.keys
#     state: present
#   with_items: "{{ developers }}"
