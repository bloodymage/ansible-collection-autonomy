---
- name: "Install packages"
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  tags:
    - users
    - users_debug
    - users-debug
    - install-packages

# ==================================================================================================
#
# Create users and groups
#
# ==================================================================================================
- name: "Ensure we have user groups required by host role"
  ansible.builtin.set_fact:
    user_groups: "{{ user_groups + [ user_mythtv_group ] }}"
  when:
    - inventory_hostname in groups ['mythtv']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have user groups required by host role"
  ansible.builtin.set_fact:
    user_groups: "{{ user_groups + [ user_minidlna_group ] }}"
  when:
    - inventory_hostname in groups ['minidlna_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have user groups required by host role"
  ansible.builtin.set_fact:
    user_groups: "{{ user_groups + [ user_git_group ] }}"
  when:
    - inventory_hostname in groups ['git_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have user groups required by host role"
  ansible.builtin.set_fact:
    user_groups: "{{ user_groups + [ user_homeassistant_group ] }}"
  when:
    - inventory_hostname in groups ['homeassistant']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have user groups required by host role"
  ansible.builtin.set_fact:
    user_groups: "{{ user_groups + [ user_vmail_group ] }}"
  when:
    - inventory_hostname in groups ['mail_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have users required by host role"
  ansible.builtin.set_fact:
    users: "{{ users + [ user_mythtv ] }}"
  when:
    - inventory_hostname in groups ['mythtv']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have users required by host role"
  ansible.builtin.set_fact:
    users: "{{ users + [ user_minidlna ] }}"
  when:
    - inventory_hostname in groups ['minidlna_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have users required by host role"
  ansible.builtin.set_fact:
    users: "{{ users + [ user_git ] }}"
  when:
    - inventory_hostname in groups ['git_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have users required by host role"
  ansible.builtin.set_fact:
    users: "{{ users + [ user_homeassistant ] }}"
  when:
    - inventory_hostname in groups ['homeassistant']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Ensure we have users required by host role"
  ansible.builtin.set_fact:
    users: "{{ users + [ user_vmail ] }}"
  when:
    - inventory_hostname in groups ['mail_servers']
  become: no
  tags:
    - users
    - users_debug
    - users-debug

- name: "Create groups"
  ansible.builtin.group:
    name: "{{ item.name }}"
    state: present
    system: "{{ item.system | default('no') }}"
    gid: "{{ item.gid | default(omit) }}"
  loop: "{{ user_groups + __user_groups }}"
  become: yes
  tags:
    - users
    - users_debug
    - users-debug

- name: Create login users (Password Enabled)
  ansible.builtin.user:
    name: "{{ item['username'] }}"
    password: "{{ __password_hash }}"
    groups: "{{ item['groups'] + [user_group_ansible_managed] | default([user_group_ansible_managed]) }}"        # Empty by default, here we give it some groups
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: no                         # Defaults to no
    create_home: yes                   # Defaults to yes
    comment: "{{ item['name'] | default(omit) }}"
    home: "{{ item['unix_home'] | default('/nonexistent') }}"
    uid:  "{{ item['id_number'] | default(omit) }}"
    update_password: always
    move_home: yes
  loop: "{{ users }}"
  vars:
    __password_store_id: "{{ rebeldream_domain }}/hosts/{{ inventory_hostname_short }}/{{ item.username }}/password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
    __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    __password_hash: "{{ __password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string ) }}" 
  loop_control:
    index_var: index
  become: yes
  when:
    - users is defined
    - item.id_number is defined
    - (item.id_number == 1000) or (item.id_number == 1001)
  tags:
    - users
    - users_debug
    - users-debug

- name: Create login users (Password Disabled)
  ansible.builtin.user:
    name: "{{ item.username }}"
    groups: "{{ item['groups'] + [user_group_ansible_managed] | default([user_group_ansible_managed]) }}"
    state: present
    shell: "{{ item['shell'] | default('/bin/bash') }}"  # Defaults to /bin/bash
    system: "{{ item.system | default('no') }}"          # Defaults to no
    create_home: yes                                     # Defaults to yes
    comment: "{{ item['name'] | default(none) }}"
    home: "{{ item['unix_home'] | default('/nonexistent') }}"
    move_home: yes
    uid:  "{{ item['id_number'] | default(omit) }}"
  loop: "{{ users }}"
  loop_control:
    index_var: index
  become: yes
  when:
    - users is defined
    - user_password_list.results[index].ansible_facts.password is not defined
    - item.username != "root"
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# Post configuration
#
# ==================================================================================================
- name: Create User SSH Keys
  ansible.builtin.user:
    name: "{{ item['username'] }}"
    generate_ssh_key: yes
    ssh_key_type: "{{ item.ssh_keytype | default('ed25519') }}"
    ssh_key_passphrase: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  loop: "{{ users }}"
  loop_control:
    index_var: index
  become: yes
  vars:
    __password_store_id: "{{ rebeldream_domain }}/hosts/{{ inventory_hostname_short }}/{{ item.username }}/ssh_key_password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  when:
    - item.ssh_cert is defined
    - user_password_list.results[index].ansible_facts.ssh_key_password is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  tags:
    - users
    - users_debug
    - users-debug

- name: Create SSH Principals file for users
  ansible.builtin.template:
    src: "ssh_principals.j2"
    dest: "/etc/ssh/auth_principals/{{ item.username }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ users }}"
  become: yes
  when:
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# Create login users (Password Enabled)
#
# ...
#
# ==================================================================================================
- name: "Setup Sudoers file for user"
  ansible.builtin.template:
    src: "user_sudoers.j2"
    dest: "/etc/sudoers.d/{{ item.username }}"
    owner: "root"
    group: "root"
    mode: "0440"
    validate: /usr/sbin/visudo -csf %s
  loop: "{{ users }}"
  become: yes
  when:
    - item.sudoers is defined
    - (item.shell is not defined) or (item.shell != "/usr/sbin/nologin")
  tags:
    - users
    - users_debug
    - users-debug

# ==================================================================================================
#
# Delete no longer defined users
#
# ...
#
# ==================================================================================================
# - name: Determine existing users
#   shell: 'grep {{ user_group_ansible_managed }} /etc/group | cut -d: -f4 | tr "," "\n"'
#   changed_when: false
#   register: existing_users
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Determine removed users
#   set_fact:
#     removed_users: "{{ existing_users.stdout_lines | difference(users) }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: "List removed users"
#   ansible.builtin.debug:
#     msg:
#       - "{{ item }}"
#     verbosity: 1
#   loop: "{{ removed_users }}"
#   tags:
#     - never
#     - users_debug
#     - users-debug

# - name: Delete removed user accounts
#   user:
#     name: "{{ item }}"
#     state: absent
#   loop: "{{ removed_users }}"
#   become: yes
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Remove sudoers for remove accounts
#   file:
#     name: "/etc/sudoers.d/{{ item }}"
#     state: absent
#   loop: "{{ removed_users }}"
#   become: yes
#   tags:
#     - users
#     - users_debug
#     - users-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
# - name: Add User SSH keys to gitolite
#   fetch:
#     src: "/home/{{ item.username }}/.ssh/id_ed25519.pub"
#     dest: "~/gitolite-admin/keydir/{{ inventory_hostname }}/{{ item.usename }}.pub"
#   loop: "{{ users }}"
#   tags:
#     - users
#     - users_debug
#     - users-debug

# - name: Add public ssh keys of users
#   authorized_key:
#     user: "{{ item }}"
#     exclusive: yes
#     key: https://github.com/{{ item }}.keys
#     state: present
#   with_items: "{{ developers }}"
