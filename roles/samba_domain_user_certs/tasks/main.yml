---
# tasks file for samba_domain_user_certs
# ==================================================================================================
#
# A cleaner way to do this might be to user the ansible ldap_attrs module:
# https://docs.ansible.com/ansible/latest/collections/community/general/ldap_attrs_module.html
#
# To do so, we need to get the actual value of the contents of the der cert files, and upload those.
#
# Short term solution, is to copy the der files to the schema master, then use an ldif to upload
# them to the domain controller's ldap database
#
# ==================================================================================================
- name: "Copy user certificates to domain schema master."
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/certs/{{ item[0].username }}_{{ item[1].name }}.der"
    dest: "/tmp/{{ item[0].username }}_{{ item[1].name }}.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"

- name: "Copy user ldif updates to domain schema master."
  ansible.builtin.template:
    src: "schema.ldif.j2"
    dest: "/tmp/{{ item[0].username }}_{{ item[1].name }}.ldif"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"

# ==================================================================================================
#
# Currently, this gives an error if already installed, what is really needed is a way to test if
# installed, and if so, don't install again.
#
# This also gives an error if a old cert is installed.  So for now, we delete the old one every
# time.
#
# Is it possible to use the ldap_attrs to update a 'binary' definition?  How would that work?
#
# ==================================================================================================
- name: "Delete old cert"
  community.general.ldap_attrs:
    dn: "CN={{ __dn }},{{ autonomy_user_dn }}"
    attributes:
      userCertificate: []
    state: exact
    bind_dn: "cn=administrator,{{ autonomy_user_dn }}"
    bind_pw: "{{ __samba_administrator_password }}"
    start_tls: yes
    server_uri: "ldap://{{ autonomy_fqdn }}"
  loop: "{{ domain_users }}"
  vars:
    __given_name: "{{ item.given_name  | default(item.username) }}"
    __surname: "{{ item.surname | default(none) }}"
    __sn: "{% if item.surname is defined %}cn: {{ item.surname }}{% endif %}"
    __dn: "{{ __given_name }}{% if item.surname is defined %} {{ __surname }}{% endif %}"
    __password_store_id: "{{ autonomy_domain }}/domain_users/administrator/password"
    __password_lookup: "{{ __password_store_id }}"
    __samba_administrator_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  when:
    - item.id_number is defined

- name: "Install user certificates into ldap attributes."
  ansible.builtin.command:
    cmd: >
      ldbmodify
      -H /var/lib/samba/private/sam.ldb
      "/tmp/{{ item[0].username }}_{{ item[1].name }}.ldif"
      --option='dsdb:schema update allowed'=true
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  ignore_errors: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"

# ==================================================================================================
#
# This fails miserably.
# "attribute 'sshPublicKey' on entry 'CN={{ __dn }},CN=users,DC={{ autonomy_org_unit_name }},DC={{ autonomy_org_name }},DC={{ autonomy_tld }}' was not
# found in the schema!"
#
# ==================================================================================================
# - name: "Insert User SSH Key into LDAP Attributes"
#   community.general.ldap_attrs:
#     dn: "CN={{ __dn }},{{ autonomy_user_dn }}"
#     attributes:
#       sshPublicKey: "{{ lookup('file', __ssh_pubkey) }}"
#     state: exact
#     bind_dn: "cn=administrator,{{ autonomy_user_dn }}"
#     bind_pw: "{{ __samba_administrator_password }}"
#     start_tls: yes
#     server_uri: "ldap://{{ autonomy_fqdn }}"
#   loop: "{{ domain_users }}"
#   vars:
#     __given_name: "{{ item.given_name  | default(item.username) }}"
#     __surname: "{{ item.surname | default(omit) }}"
#     __dn: "{{ __given_name }}{% if item.surname is defined %} {{ __surname }}{% endif %}"
#     __ssh_pubkey: "{{ ownca_directory }}/users/ssh/{{ item.username }}.pub"  
#     __password_store_id: "{{ autonomy_domain }}/domain_users/administrator/password"
#     __password_lookup: "{{ __password_store_id }}"
#     __samba_administrator_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
#   when:
#     - item.id_number is defined

