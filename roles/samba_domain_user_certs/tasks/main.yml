---
# tasks file for samba_domain_user_certs
# ==================================================================================================
#
# A cleaner way to do this might be to user the ansible ldap_attrs module:
# https://docs.ansible.com/ansible/latest/collections/community/general/ldap_attrs_module.html
#
# To do so, we need to get the actual value of the contents of the der cert files, and upload those.
#
# Short term solution, is to copy the der files to the schema master, then use an ldif to upload
# them to the domain controller's ldap database
#
# ==================================================================================================
- name: "Copy user certificates to domain schema master."
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/certs/{{ item[0].username }}_{{ item[1].name }}.der"
    dest: "/tmp/{{ item[0].username }}_{{ item[1].name }}.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"

- name: "Copy user certificates to domain schema master."
  ansible.builtin.template:
    src: "schema.ldif.j2"
    dest: "/tmp/{{ item[0].username }}_{{ item[1].name }}.ldif"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"

# ==================================================================================================
#
# Currently, this gives an error if already installed, what is really needed is a way to test if
# installed, and if so, don't install again.
#
# ==================================================================================================
- name: "Install user certificates into ldap attributes."
  ansible.builtin.command:
    cmd: >
      ldbmodify
      -H /var/lib/samba/private/sam.ldb
      "/tmp/{{ item[0].username }}_{{ item[1].name }}.ldif"
      --option='dsdb:schema update allowed'=true
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  become: yes
  ignore_errors: yes
  when:
    - item[0].id_number is defined
    - item[1].name == "authentication"
