---
# tasks file for mail-server
# ==================================================================================================
#
# Task: Install apps
#
# ==================================================================================================
- name: "Pretasks"
  block:
    - name: "Include OS-specific variables."
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: "{{ __os_variables_files }}"
          paths:
            - "vars"
      become: no
 
    - name: "Install packages."
      ansible.builtin.package:
        name: "{{ autonomy_packages }}"
        state: present
      become: yes
 
- name: "Update password and auth mechanims."
  ansible.builtin.set_fact:
    dovecot_password_databases: "{{ dovecot_password_databases + ['ldap'] }}"
    dovecot_auth_mechanisms: "{{ ['gssapi'] + dovecot_auth_mechanisms + ['oauthbearer xoauth2'] }}"
    dovecot_auth_conf: "{{ dovecot_auth_conf + [dovecot_auth_conf_ldap] + [dovecot_auth_conf_oauth2] }}"
  become: no
  when:
    - autonomy_realm_identity_management_system == "samba"

- name: "Check if we are using a bounce folder."
  ansible.builtin.set_fact:
    dovecot_private_namespace_mailboxes: "{{ dovecot_private_namespace_mailboxes + [dovecot_bounce_folder] }}"
  become: no
  when:
    - dovecot_bounce_folder_name is truthy

- name: "Check if we are using an Advertisements folder."
  ansible.builtin.set_fact:
    dovecot_private_namespace_mailboxes: "{{ dovecot_private_namespace_mailboxes + [dovecot_advertisements_folder] }}"
  become: no
  when:
    - dovecot_advertisements_folder_name is truthy

- name: "Check if we are using an inboxzero namespace configuration."
  ansible.builtin.set_fact:
    dovecot_namespaces: "{{ dovecot_namespaces + [dovecot_inboxzero_namespace] }}"
  become: no
  when:
    - dovecot_use_inboxzero_namespace

- name: "Get Users' password from password-store."
  ansible.builtin.set_fact:
    __mail_user: "{{ mail_user }}"
    __mail_user_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}{{ autonomy_domain }}/domain_users/{{ mail_user }}/password"
    __password_lookup: "{{ __password_store_id }}"
  #no_log: yes
  become: no
  delegate_to: localhost
  register: domain_user_list

# ==================================================================================================
#
# Configuration tasks
#
# ==================================================================================================
- name: "Install config files to /etc/dovecot."
  ansible.builtin.template:
    src: "etc/dovecot/{{ item }}.j2"
    dest: "/etc/dovecot/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop:
    - dovecot.conf
    #- "{{ dovecot_password_file }}"
  become: yes
  notify: restart dovecot

- name: "Install auth config files to /etc/dovecot."
  ansible.builtin.template:
    src: "etc/dovecot/dovecot-{{ item.name }}.conf.ext.j2"
    dest: "/etc/dovecot/dovecot-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ dovecot_auth_conf }}"
  become: yes
  notify: restart dovecot
  when:
    - item.name != "system"
    - item.name != "deny"

- name: "Install configuration files to /etc/dovecot/conf.d."
  ansible.builtin.template:
    src: "etc/dovecot/conf.d/{{ item }}.j2"
    dest: "/etc/dovecot/conf.d/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop:
    - 10-auth.conf
    - 10-director.conf
    - 10-logging.conf
    - 10-mail.conf
    - 10-master.conf
    - 10-ssl.conf
    - 10-tcpwrapper.conf
    - 15-lda.conf
    - 15-mailboxes.conf
    - 20-imap.conf
    - 20-lmtp.conf
    - 20-managesieve.conf
    - 90-acl.conf
    - 90-plugin.conf
    - 90-quota.conf
    - 90-sieve-extprograms.conf
    - 90-sieve.conf
    - auth-checkpassword.conf.ext
    - auth-dict.conf.ext
    - auth-master.conf.ext
    - auth-static.conf.ext
    - auth-vpopmail.conf.ext
  notify: restart dovecot

- name: "Install authorization configuration files to /etc/dovecot/conf.d."
  ansible.builtin.template:
    src: "etc/dovecot/conf.d/auth.conf.j2"
    dest: "/etc/dovecot/conf.d/auth-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_auth_conf }}"
  notify: restart dovecot

# ==================================================================================================
#
# This section creates the virtual directories.
#
# ==================================================================================================
- name: "Ensure Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "/etc/dovecot/virtual/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ dovecot_virtual_mailboxes }}"

- name: "Install configuration files to /etc/dovecot/virtual."
  ansible.builtin.template:
    src: "etc/dovecot/virtual/dovecot-virtual.j2"
    dest: "/etc/dovecot/virtual/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_virtual_mailboxes }}"

# ==================================================================================================
#
# If "dovecot_inboxzero_mailboxes" is defined, then create the inboxzero virtual directories.
# It's definition is the exact same as 'dovecot_virtual_mailboxes'
#
# I use this to create 'inboxzero' style virtual directories at the top for my users.
# Inboxzero/
#   Inbox (Emails that are unread)
#   Followup (Emails flagged as 'important')
#   Hold (Emails that are ____________)
#
# ==================================================================================================
- name: "Ensure 'Inboxzero' Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "/etc/dovecot/inboxzero/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ dovecot_inboxzero_mailboxes }}"
  when:
    - dovecot_use_inboxzero_namespace

- name: "Install configuration files to /etc/dovecot/inboxzero."
  ansible.builtin.template:
    src: "etc/dovecot/virtual/dovecot-virtual.j2"
    dest: "/etc/dovecot/inboxzero/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_inboxzero_mailboxes }}"
  when:
    - dovecot_use_inboxzero_namespace

# ==================================================================================================
#
# Setup Dovecot Sieve
#
# ==================================================================================================
- name: "Ensure Dovecot Sieve Directories exists."
  ansible.builtin.file:
    path: "{{ dovecot_etc }}/sieve/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop:
    - before
    - after
    - global

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "etc/dovecot/sieve/report-sieve.j2"
    dest: "{{ dovecot_etc }}/sieve/global/report-{{ item.type }}.sieve"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop: "{{ dovecot_imapsieve_mailboxes }}"
  tags:
    - sieve-filters

- name: "Install Sieve rules."
  ansible.builtin.template:
    src: "etc/dovecot/sieve/{{ item.name }}.sieve.j2"
    dest: "{{ dovecot_etc }}/sieve/{{ item.type }}/{{ item.priority }}-{{ item.name }}.sieve"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_sieve_files }}"
  vars:
    __main_folder: "Inbox"
  when:
    - (item.archive is not defined or item.archive is false)
  tags:
    - sieve-filters

- name: "Install Sieve rules. (Archive)"
  ansible.builtin.template:
    src: "etc/dovecot/sieve/{{ item.name }}.sieve.j2"
    dest: "{{ dovecot_etc }}/sieve/{{ item.type }}/{{ item.priority }}-{{ item.name }}-archive.sieve"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_sieve_files }}"
  vars:
    __main_folder: "Archive"
  when:
    - item.archive is defined
    - item.archive
  tags:
    - sieve-filters

- name: "Ensure Sieve Pipe Bin Dir exists."
  ansible.builtin.file:
    path: "{{ dovecot_sieve_pipe_bin_dir }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "usr/lib/dovecot/sieve/sa-learn.j2"
    dest: "{{ dovecot_sieve_pipe_bin_dir }}/sa-learn-{{ item.type }}.sh"
    owner: "root"
    group: "root"
    mode: "0755"
  become: yes
  loop: "{{ dovecot_imapsieve_mailboxes }}"

# ==================================================================================================
#
# Email Migration
#
# I am considering changing this to a template that creates a script to do this.  Then setup cron to
# run the script say every 5 minutues.
#
# That may only make sense if it's not a one time migration.
#
# ==================================================================================================
# - name: "Perform email migration"
#   ansible.builtin.command:
#     cmd: >-
#       doveadm -o imapc_password='{{ item.password | default(__password) }}'
#       backup
#       -1
#       -a 'Virtual/All Mail'
#       -O '-$GmailHaveLabels'
#       -R
#       -u {{ item.account }} imapc:
#   become: yes
#   loop: "{{ dovecot_migration_users }}"
#   vars:
#     __password_store_id: "{{ autonomy_passdb }}{{ autonomy_domain }}/external_services/{{ dovecot_migration_users }}/{{ item.account }}"
#     __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
#     __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
#     __password_create: "create=true"
#     __password_symbols: "nosymbols=true"
#     __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
#     __password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
#   when:
#     - item.account != 'bob@example.com'
