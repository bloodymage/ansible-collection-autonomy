---
# tasks file for mail-server
# ==================================================================================================
#
# Task: Install apps
#
# ==================================================================================================
- name: "Pretasks"
  block:
    - name: "Include OS-specific variables."
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: "{{ __os_variables_files }}"
          paths:
            - "vars"
      become: no
      tags:
        - dovecot
        - dovecot_debug
        - dovecot-debug
        - install-packages

    - name: "Install packages."
      ansible.builtin.package:
        name: "{{ autonomy_packages }}"
        state: present
      become: yes
      tags:
        - dovecot
        - dovecot_debug
        - dovecot-debug
        - install-packages

- name: "Update password and auth mechanims."
  ansible.builtin.set_fact:
    dovecot_password_databases: "{{ dovecot_password_databases + ['ldap'] }}"
    dovecot_auth_mechanisms: "{{ ['gssapi'] + dovecot_auth_mechanisms + ['oauthbearer xoauth2'] }}"
    dovecot_auth_conf: "{{ dovecot_auth_conf + [dovecot_auth_conf_ldap] + [dovecot_auth_conf_oauth2] }}"
  become: no
  when:
    - autonomy_realm_identity_management_system == "samba"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug
    - install-packages

- name: "Get Users' password from password-store."
  ansible.builtin.set_fact:
    __mail_user: "{{ mail_user }}"
    __mail_user_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/domain_users/{{ mail_user }}/password"
    __password_lookup: "{{ __password_store_id }}"
  #no_log: yes
  become: no
  delegate_to: localhost
  register: domain_user_list
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

# ==================================================================================================
#
# Configuration tasks
#
# ==================================================================================================
- name: "Install config files to /etc/dovecot."
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/dovecot/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop:
    - dovecot.conf
    #- "{{ dovecot_password_file }}"
  become: yes
  notify: restart dovecot
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install auth config files to /etc/dovecot."
  ansible.builtin.template:
    src: "dovecot-{{ item.name }}.conf.ext.j2"
    dest: "/etc/dovecot/dovecot-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ dovecot_auth_conf }}"
  become: yes
  notify: restart dovecot
  when:
    - item.name != "system"
    - item.name != "deny"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install configuration files to /etc/dovecot/conf.d."
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/dovecot/conf.d/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop:
    - 10-auth.conf
    - 10-director.conf
    - 10-logging.conf
    - 10-mail.conf
    - 10-master.conf
    - 10-ssl.conf
    - 10-tcpwrapper.conf
    - 15-lda.conf
    - 15-mailboxes.conf
    - 20-imap.conf
    - 20-lmtp.conf
    - 20-managesieve.conf
    - 90-acl.conf
    - 90-plugin.conf
    - 90-quota.conf
    - 90-sieve-extprograms.conf
    - 90-sieve.conf
    - auth-checkpassword.conf.ext
    - auth-dict.conf.ext
    - auth-master.conf.ext
    - auth-static.conf.ext
    - auth-vpopmail.conf.ext
  notify: restart dovecot
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install authorization configuration files to /etc/dovecot/conf.d."
  ansible.builtin.template:
    src: "auth.conf.j2"
    dest: "/etc/dovecot/conf.d/auth-{{ item.name }}.conf.ext"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_auth_conf }}"
  notify: restart dovecot
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

# ==================================================================================================
#
# This section creates the virtual directories.
#
# ==================================================================================================
- name: "Ensure Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "/etc/dovecot/virtual/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ dovecot_virtual_mailboxes }}"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install configuration files to /etc/dovecot/virtual."
  ansible.builtin.template:
    src: "dovecot-virtual.j2"
    dest: "/etc/dovecot/virtual/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_virtual_mailboxes }}"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

# ==================================================================================================
#
# If "dovecot_inboxzero_mailboxes" is defined, then create the inboxzero virtual directories.
# It's definition is the exact same as 'dovecot_virtual_mailboxes'
#
# I use this to create 'inboxzero' style virtual directories at the top for my users.
# Inboxzero/
#   Inbox (Emails that are unread)
#   Followup (Emails flagged as 'important')
#   Hold (Emails that are ____________)
#
# ==================================================================================================
- name: "Ensure 'Inboxzero' Virtual Directory definitions exist."
  ansible.builtin.file:
    path: "/etc/dovecot/inboxzero/{{ item.name }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop: "{{ dovecot_inboxzero_mailboxes }}"
  when:
    - dovecot_inboxzero_mailboxes is defined

- name: "Install configuration files to /etc/dovecot/inboxzero."
  ansible.builtin.template:
    src: "dovecot-virtual.j2"
    dest: "/etc/dovecot/inboxzero/{{ item.name }}/dovecot-virtual"
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_inboxzero_mailboxes }}"
  when:
    - dovecot_inboxzero_mailboxes is defined

# ==================================================================================================
#
# Setup Dovecot Sieve
#
# ==================================================================================================
- name: "Ensure Sieve Pipe Bin Dir exists."
  ansible.builtin.file:
    path: "{{ dovecot_sieve_pipe_bin_dir }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "report-sieve.j2"
    dest: "{{ dovecot_sieve_pipe_bin_dir }}/report-{{ item.type }}.sieve"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop: "{{ dovecot_imapsieve_mailboxes }}"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Install IMAPSieve Spam Update Filters."
  ansible.builtin.template:
    src: "sa-learn.j2"
    dest: "{{ dovecot_sieve_pipe_bin_dir }}/sal-learn-{{ item.type }}.sh"
    owner: "root"
    group: "root"
    mode: "0755"
  become: yes
  loop: "{{ dovecot_imapsieve_mailboxes }}"
  tags:
    - dovecot
    - dovecot_debug
    - dovecot-debug

- name: "Ensure Dovecot Sieve Directories exists."
  ansible.builtin.file:
    path: "{{ dovecot_etc }}/sieve/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0755"
    state: directory
  become: yes
  loop:
    - before
    - after
    - global

- name: "Install Sieve-before rules."
  ansible.builtin.copy:
    src: "etc/dovecot/sieve/before/{{ item }}"
    dest: "{{ dovecot_etc }}/sieve/before/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_sieve_before_files }}"

- name: "Install Sieve-after rules."
  ansible.builtin.copy:
    src: "etc/dovecot/sieve/after/{{ item }}"
    dest: "{{ dovecot_etc }}/sieve/after/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_sieve_after_files }}"

- name: "Install Sieve Global rules."
  ansible.builtin.copy:
    src: "etc/dovecot/sieve/global/{{ item }}"
    dest: "{{ dovecot_etc }}/sieve/global/{{ item }}"
    owner: "{{ mail_user }}"
    group: "{{ mail_user }}"
    mode: "0644"
  become: yes
  loop: "{{ dovecot_sieve_global_files }}"

# ==================================================================================================
#
# Email Migration
#
# I am considering changing this to a template that creates a script to do this.  Then setup cron to
# run the script say every 5 minutues.
#
# That may only make sense if it's not a one time migration.
#
# ==================================================================================================
# - name: "Perform email migration"
#   ansible.builtin.command:
#     cmd: >-
#       doveadm -o imapc_password='{{ item.password }}'
#       backup
#       -1
#       -a 'Virtual/All Mail'
#       -O '-$GmailHaveLabels'
#       -R
#       -u {{ item.account }} imapc:
#   become: yes
#   loop: "{{ dovecot_migration_users }}"
#   when:
#     - item.account != 'bob@example.com'
