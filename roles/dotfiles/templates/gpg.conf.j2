# {{ ansible_managed }}

{% if item.gpg_keys is defined %}
  default-key {{ item.gpg_keys[0].keyid }}
{% endif %}

{% if dotfiles_gpg_pinentry_mode is defined %}
  pinentry-mode {{ dotfiles_gpg_pinentry_mode }}
{% endif %}
no-emit-version 
no-comments
{% if dotfiles_gpg_keyid_format is defined %}
  keyid-format {{ dotfiles_gpg_keyid_format }}
{% endif %}

with-fingerprint
with-subkey-fingerprint
with-keygrip
{% if dotfiles_gpg_list_options is defined %}
  {% for option in dotfiles_gpg_list_options %}
    list-options {{ option }}
  {% endfor %}
{% endif %}

verify-options show-uid-validity

{% if dotfiles_gpg_use_agent -%}
  use-agent
{% endif %}

{% if dotfiles_gpg_no_greeting -%}
  no-greeting
{% endif %}

{# =================================================================================================
#
#-----------------------------
# keyserver
#-----------------------------
#
# This is the server that --recv-keys, --send-keys, and --search-keys will
# communicate with to receive keys from, send keys to, and search for keys on
#
# ================================================================================================== #}
{% for keyserver in dotfiles_gpg_keyserver -%}
  keyserver {{ keyserver }}
{% endfor %}

{# Provide a certificate store to override the system default #}
{# Get this from https://sks-keyservers.net/sks-keyservers.netCA.pem #}
{# Replace with hkp-cacert in dirmngr.conf #}
#keyserver-options ca-cert-file=/usr/local/etc/ssl/certs/hkps.pool.sks-keyservers.net.pem

{# =================================================================================================
#
# Set the proxy to use for HTTP and HKP keyservers - default to the standard
# local Tor socks proxy
# It is encouraged to use Tor for improved anonymity. Preferrably use either a
# dedicated SOCKSPort for GnuPG and/or enable IsolateDestPort and
# IsolateDestAddr
#
# ================================================================================================== #}
#keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050
{# When using --refresh-keys, if the key in question has a preferred keyserver #}
{# URL, then disable use of that preferred keyserver to refresh the key from #}
keyserver-options no-honor-keyserver-url
keyserver-options include-revoked
keyserver-options auto-key-retrieve

{# list of personal digest preferences. When multiple digests are supported by #}
{# all recipients, choose the strongest one #}
personal-cipher-preferences AES256 AES192 AES CAST5
{# list of personal digest preferences. When multiple ciphers are supported by #}
{# all recipients, choose the strongest one #}
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
{# message digest algorithm used when signing a key #}
cert-digest-algo SHA512
{# This preference list is used for new keys and becomes the default for #}
{# "setpref" in the edit menu #}
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed


# If you do not pass a recipient to gpg, it will ask for one.  Using
# this option you can encrypt to a default key.  Key validation will
# not be done in this case.  The second form uses the default key as
# default recipient.

#default-recipient some-user-id
#default-recipient-self

{# =================================================================================================
#
# Because some mailers change lines starting with "From " to ">From "
# it is good to handle such lines in a special way when creating
# cleartext signatures; all other PGP versions do it this way too.
# To enable full OpenPGP compliance you may want to use this option.
#
# ================================================================================================== #}
#no-escape-from-lines

# When verifying a signature made from a subkey, ensure that the cross
# certification "back signature" on the subkey is present and valid.
# This protects against a subtle attack against subkeys that can sign.
# Defaults to --no-require-cross-certification.  However for new
# installations it should be enabled.

require-cross-certification

# If you do not use the Latin-1 (ISO-8859-1) charset, you should tell
# GnuPG which is the native character set.  Please check the man page
# for supported character sets.  This character set is only used for
# metadata and not for the actual message which does not undergo any
# translation.  Note that future version of GnuPG will change to UTF-8
# as default character set.

#charset utf-8

# Group names may be defined like this:
#   group mynames = paige 0x12345678 joe patti
#
# Any time "mynames" is a recipient (-r or --recipient), it will be
# expanded to the names "paige", "joe", and "patti", and the key ID
# "0x12345678".  Note there is only one level of expansion - you
# cannot make an group that points to another group.  Note also that
# if there are spaces in the recipient name, this will appear as two
# recipients.  In these cases it is better to use the key ID.

#group mynames = paige 0x12345678 joe patti

# Some old Windows platforms require 8.3 filenames.  If your system
# can handle long filenames, uncomment this.

#no-mangle-dos-filenames

# Lock the file only once for the lifetime of a process.  If you do
# not define this, the lock will be obtained and released every time
# it is needed - normally this is not needed.

lock-once


# Uncomment this line to display photo user IDs in key listings and
# when a signature from a key with a photo is verified.

#show-photos

# Use this program to display photo user IDs
#
# %i is expanded to a temporary file that contains the photo.
# %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
# %k is expanded to the key ID of the key.
# %K is expanded to the long OpenPGP key ID of the key.
# %t is expanded to the extension of the image (e.g. "jpg").
# %T is expanded to the MIME type of the image (e.g. "image/jpeg").
# %f is expanded to the fingerprint of the key.
# %% is %, of course.
#
# If %i or %I are not present, then the photo is supplied to the
# viewer on standard input.  If your platform supports it, standard
# input is the best way to do this as it avoids the time and effort in
# generating and then cleaning up a secure temp file.
#
# The default program is "xloadimage -fork -quiet -title 'KeyID 0x%k' stdin"
# On Mac OS X and Windows, the default is to use your regular JPEG image
# viewer.
#
# Some other viewers:
# photo-viewer "qiv %i"
# photo-viewer "ee %i"
# photo-viewer "display -title 'KeyID 0x%k'"
#
# This one saves a copy of the photo ID in your home directory:
# photo-viewer "cat > ~/photoid-for-key-%k.%t"
#
# Use your MIME handler to view photos:
# photo-viewer "metamail -q -d -b -c %T -s 'KeyID 0x%k' -f GnuPG"

# Automatic key location
#
# GnuPG can automatically locate and retrieve keys as needed using the
# auto-key-locate option.  This happens when encrypting to an email
# address (in the "user@example.com" form), and there are no
# user@example.com keys on the local keyring.  This option takes the
# following arguments, in the order they are to be tried:
#
# cert = locate a key using DNS CERT, as specified in RFC-4398.
#        GnuPG can handle both the PGP (key) and IPGP (URL + fingerprint)
#        CERT methods.
#
# pka = locate a key using DNS PKA.
#
# ldap = locate a key using the PGP Universal method of checking
#        "ldap://keys.(thedomain)".  For example, encrypting to
#        user@example.com will check ldap://keys.example.com.
#
# keyserver = locate a key using whatever keyserver is defined using
#             the keyserver option.
#
# You may also list arbitrary keyservers here by URL.
#
# Try CERT, then PKA, then LDAP, then hkp://keys.gnupg.net:
#auto-key-locate cert pka hkp://keys.gnupg.net
#
#comment GPGTools - http://gpgtools.org
