---
# tasks file for openldap
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_network_os | default(none) }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_distribution.split(' ')[0] | lower }}.yml"
        - "{{ ansible_os_family | lower }}_family.yml"
        - "{{ ansible_system | lower }}.yml"
        - main.yml
      paths:
        - "vars"
  become: no

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ autonomy_packages }}"
    state: present
  become: yes

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: "Ensure ldap config dir exists"
  ansible.builtin.file:
    path: "/etc/ldap/{{ item.name }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  become: yes
  loop: "{{ openldap_etc_folders }}"

- name: "Create basic ldap.conf"
  ansible.builtin.template:
    src: "ldap.conf.j2"
    dest: "/etc/ldap/ldap.conf"
    owner: root
    group: root
    mode: "0644"
  become: yes

# - name: "Install config ldifs"
#   ansible.builtin.copy:
#     src: "{{ item }}"
#     dest: "/etc/ldap/schema/{{ item }}"
#     owner: root
#     group: root
#     mode: 0644
#   become: yes
#   loop:
#     - collective.ldif
#     - collective.schema
#     - corba.ldif
#     - corba.schema
#     - core.ldif
#     - core.schema
#     - cosine.ldif
#     - cosine.schema
#     - duaconf.ldif
#     - duaconf.schema
#     - dyngroup.ldif
#     - dyngroup.schema
#     - gnupg-ldap-init.ldif
#     - gnupg-ldap-schema.ldif
#     - inetorgperson.ldif
#     - inetorgperson.schema
#     - java.ldif
#     - java.schema
#     - misc.ldif
#     - misc.schema
#     - nis.ldif
#     - nis.schema
#     - openldap.ldif
#     - openldap.schema
#     - pmi.ldif
#     - pmi.schema
#     - ppolicy.ldif
#     - ppolicy.schema

- name: "Create Config Ldifs"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/ldap/schema/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop:
    - certinfo.ldif

- name: "Create Backend schemas"
  ansible.builtin.template:
    src: backend.ldif.j2
    dest: "/etc/ldap/schema/backend_{{ item.name }}.ldif"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop: "{{ openldap_backends }}"

- name: "Create module ldif"
  ansible.builtin.template:
    src: module.ldif.j2
    dest: "/etc/ldap/schema/module_{{ item }}.ldif"
    owner: root
    group: root
    mode: "0644"
  become: yes
  loop: "{{ openldap_modules }}"

- name: "Add schema to ldap"
  ansible.builtin.command:
    cmd: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/{{ item }}.ldif"
  become: yes
  loop:
    - certinfo
    - core
    - cosine
    - inetorgperson
    - misc
    - nis
    - module_rwm
    #- gnupg-ldap-init
    #- gnupg-ldap-schema
