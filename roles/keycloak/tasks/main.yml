---
# tasks file for keycloak
- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug
    - install-packages

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ autonomy_packages }}"
    state: present
  become: yes
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug
    - install-packages

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: "Download Keycloak Sources"
  ansible.builtin.get_url:
    url: "{{ item.source }}"
    dest: "/tmp/{{ item.file }}"
    checksum: "{{ item.checksum_type }}:{{ item.checksum }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  loop: "{{ keycloak_source_url }}"
  become: no
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug
    - download-sources

- name: "Create Keycloak Directory"
  ansible.builtin.file:
    path: "{{ keycloak_alt_home }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: yes
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Create Keycloak Data Directory"
  ansible.builtin.file:
    path: "{{ keycloak_data_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: yes
  when:
    - keycloak_mode == "standalone"
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: Extract Sources
  ansible.builtin.unarchive:
    src: "/tmp/{{ item.file }}"
    dest: "{{ keycloak_alt_home }}"
    remote_src: yes
    owner: root
    group: root
    extra_opts: [--strip-components=1]
    creates: "{{ keycloak_license_path }}"
  become: yes
  loop: "{{ keycloak_source_url }}"
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Create a symbolic link keycloak -> keycloak-{{ keycloak_version }}"
  ansible.builtin.file:
    src: "{{ keycloak_alt_home }}"
    dest: "{{ keycloak_home }}"
    owner: root
    group: root
    state: link
  become: yes
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Ensure we have a password for the keycloak administrator user."
  ansible.builtin.set_fact:
    keycloak_admin_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}{{ autonomy_domain }}/hosts/{{ autonomy_hostname }}/keycloak_admin_password"
    __password_length: "length={{ keycloak_password_length }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  become: no
  when:
    - keycloak_admin_password == "password"
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Ensure we have a password for the keycloak keystore."
  ansible.builtin.set_fact:
    keycloak_keystore_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}{{ autonomy_domain }}/hosts/{{ autonomy_hostname }}/keycloak_keystore_password"
    __password_length: "length={{ keycloak_password_length }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  become: no
  when:
    - keycloak_keystore_password == "password"
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Install Service File."
  ansible.builtin.template:
    src: "service.conf.j2"
    dest: "/etc/systemd/system/keycloak.service"
    owner: root
    group: root
    mode: "0644"
  become: yes
  notify:
    - "enable keycloak"
    - "daemon reload"
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Install Keycloak configuration file"
  ansible.builtin.template:
    src: "keycloak.xml.j2"
    dest: "{{ keycloak_home }}/{{ keycloak_mode }}/configuration/{{ keycloak_mode }}.xml"
    owner: root
    group: root
    mode: "0644"
  become: yes
  notify: restart keycloak
  tags:
    - keycloak
 
- name: "Create list of certs to add into the combined pkcs12 file. (Part 1)"
  ansible.builtin.set_fact:
    keycloak_pkcs12_other_certificates: "{{ keycloak_pkcs12_other_certificates + [__additional_cert] }}"
  loop: "{{ autonomy_zones | product(__keycloak_certificate_authorities_id) }}"
  vars:
    __etc_certs: "/etc/ssl/certs"
    __additional_cert: "{{ __etc_certs }}/{{ autonomy_org_name }}-{{ item[0].name }}-{{ item[1] }}.pem"
  become: no
  when:
    - item[0].type != "public"
  tags:
    - keycloak
 
- name: "Add to list of certs to add into the combined pkcs12 file. (Part 2)"
  ansible.builtin.set_fact:
    keycloak_pkcs12_other_certificates: "{{ keycloak_pkcs12_other_certificates + [__additional_cert] }}"
  loop: "{{ groups['samba_domain_controllers'] }}"
  when:
    - groups['samba_domain_controllers'] is defined
  vars:
    __etc_certs: "/etc/ssl/certs"
    __additional_cert: "{{ __etc_certs }}/{{ item }}.pem"
  become: no
  tags:
    - keycloak
 
# ==================================================================================================
#
# TODO: Add way to determine if this should be 'force' overwriten.
#
# ==================================================================================================
- name: Generate PKCS#12 file
  community.crypto.openssl_pkcs12:
    path:  "{{ keycloak_home }}/{{ keycloak_mode }}/configuration/{{ keycloak_keystore_file }}"
    friendly_name: "{{ keycloak_keystore_alias }}"
    privatekey_path: "{{ ownca_etc }}/private/{{ autonomy_fqdn }}.key"
    certificate_path: "{{ ownca_etc }}/certs/{{ autonomy_fqdn }}-chain.pem"
    other_certificates: "{{ keycloak_pkcs12_other_certificates }}"
    action: export
    passphrase: "{{ keycloak_keystore_password }}"
    state: present
    iter_size: 0
    maciter_size: 0
    owner: root
    group: root
    mode: '0600'
    backup: yes
    force: yes
  become: yes
  notify: restart keycloak
  tags:
    - keycloak
    - keycloak_debug
    - keycloak-debug

- name: "Create symlink to data directory."
  ansible.builtin.file:
    src: "{{ keycloak_data_dir }}"
    dest: "{{ keycloak_home }}/{{ keycloak_mode }}/data"
    owner: root
    group: root
    state: link
  when:
    - keycloak_mode == "standalone"
  tags:
    - keycloak

# ==================================================================================================
#
# I really need a way to test if the admin user is already created.  If so, don't run the command.
#
# As far as I can tell, no new file is created as a result.
#
# This site may have some hints:
# https://gitlab.archlinux.org/seblu/infrastructure/-/blob/keycloak-open-registration/roles/keycloak/tasks/main.yml
#
# ==================================================================================================
- name: "Create admin user"
  ansible.builtin.command:
    cmd: >
      {{ keycloak_binary_dir }}/add-user-keycloak.sh
      -r master
      -u "{{ keycloak_admin_user }}"
      -p "{{ keycloak_admin_password }}"
  become: yes
  tags:
    - never
    - keycloak-admin-user

# ==================================================================================================
#
# We need to ensure we have a running keycloak server, because if it's not running, all
# subsequent tasks will fail.
#
# ==================================================================================================
# - name: "Ensure we have a running keycloak server."
#   ansible.builtin.meta: flush_handlers

# - name: "Test Login to keycloak server."
#   ansible.builtin.command:
#     cmd: >-
#       {{ keycloak_binary_dir }}/kcadm.sh config credentials
#       --server http://localhost:8080/auth
#       --realm master
#       --user {{ keycloak_admin_user }}
#       --password {{ keycloak_admin_password }}
#   become: no
#   tags:
#     - keycloak
#     - keycloak_debug
#     - keycloak-debug

# - name: "Create realms."
#   community.general.keycloak_realm:
#     id: "{{ item.name }}"
#     auth_client_id: "admin-cli"
#     auth_username: "{{ keycloak_admin_user }}"
#     auth_password: "{{ keycloak_admin_password }}"
#     auth_realm: "master"
#     state: present
#   loop: "{{ autonomy_zones }}"
#   become: no
#   when:
#     - item.type == "internal"
#   tags:
#     - keycloak
#     - keycloak_debug
#     - keycloak-debug

# Create User Federation
#
# kcadm.sh create components
# -r {{ autonomy_org_unit_name | title }}
# -s name=kerberos-ldap-provider
# -s providerId=ldap
# -s providerType=org.keycloak.storage.UserStorageProvider
# -s parentId=3d9c572b-8f33-483f-98a6-8bb421667867
# -s 'config.priority=["1"]'
# -s 'config.fullSyncPeriod=["-1"]'
# -s 'config.changedSyncPeriod=["-1"]'
# -s 'config.cachePolicy=["DEFAULT"]'
# -s config.evictionDay=[]
# -s config.evictionHour=[]
# -s config.evictionMinute=[]
# -s config.maxLifespan=[]
# -s 'config.batchSizeForSync=["1000"]'
# -s 'config.editMode=["{{ item.edit_mode }}"]'
# -s 'config.syncRegistrations=["false"]'
# -s 'config.vendor=["other"]'
# -s 'config.usernameLDAPAttribute=["sAMAccountName"]'
# -s 'config.rdnLDAPAttribute=["uid"]'
# -s 'config.uuidLDAPAttribute=["objectGUID"]'
# -s 'config.userObjectClasses=["inetOrgPerson, organizationalPerson, user"]'
# -s 'config.connectionUrl=["ldap://{{ __samba_schema_master }}"]'
# -s 'config.usersDn=["{{ autonomy_user_dn }}"]'
# -s 'config.authType=["simple"]'
# -s 'config.bindDn=["{{ __keycloak_user }},{{ autonomy_user_dn }}"]'
# -s 'config.bindCredential=["{{ __keycloak_password }}"]'
# -s 'config.searchScope=["1"]'
# -s 'config.useTruststoreSpi=["ldapsOnly"]'
# -s 'config.connectionPooling=["true"]'
# -s 'config.pagination=["true"]'
# -s 'config.allowKerberosAuthentication=["true"]'
# -s 'config.serverPrincipal=["HTTP/localhost@KEYCLOAK.ORG"]'
# -s 'config.keyTab=["http.keytab"]'
# -s 'config.kerberosRealm=["{{ autonomy_domain | upper }}"]'
# -s 'config.debug=["true"]'
# -s 'config.useKerberosForPasswordAuthentication=["true"]'

# ==================================================================================================
#
# Configure clients
#
# https://docs.ansible.com/ansible/latest/collections/community/general/keycloak_client_module.html
#
# This feels weird to write it this way, but that's what the docs say.
#
# ==================================================================================================
# - name: "Configure Clients"
#   local_action:
#     module: keycloak_client
#     auth_client_id: admin-cli
#     auth_keycloak_url: "https://{{ autonomy_fqdn }}"
#     auth_realm: master
#     auth_username: "{{ keycloak_admin_user }}"
#     auth_password: "{{ keycloak_admin_password }}"
#     state: present
#     realm: master
#     client_id: "{{ item.client_id }}"
#     id: d8b127a3-31f6-44c8-a7e4-4ab9a3e78d95
#     name: "{{ item.name }}"
#     description: "{{ item.description }}"
#     root_url: https://www.example.com/
#     admin_url: https://www.example.com/admin_url
#     base_url: "{{ item.base_url }}"
#     enabled: True
#     client_authenticator_type: client-secret
#     secret: REALLYWELLKEPTSECRET
#     redirect_uris:
#       - https://www.example.com/*
#       - http://localhost:8888/
#     web_origins:
#       - https://www.example.com/*
#     not_before: 1507825725
#     bearer_only: False
#     consent_required: False
#     standard_flow_enabled: True
#     implicit_flow_enabled: False
#     direct_access_grants_enabled: False
#     service_accounts_enabled: False
#     authorization_services_enabled: False
#     public_client: False
#     frontchannel_logout: False
#     protocol: openid-connect
#     full_scope_allowed: false
#     node_re_registration_timeout: -1
#     client_template: test
#     use_template_config: False
#     use_template_scope: false
#     use_template_mappers: no
#     registered_nodes:
#       node01.example.com: 1507828202
#     registration_access_token: eyJWT_TOKEN
#     surrogate_auth_required: false
#     default_roles:
#       - test01
#       - test02
#     protocol_mappers:
#       - config:
#           access.token.claim: True
#           claim.name: "family_name"
#           id.token.claim: True
#           jsonType.label: String
#           user.attribute: lastName
#           userinfo.token.claim: True
#         consentRequired: True
#         consentText: "${familyName}"
#         name: family name
#         protocol: openid-connect
#         protocolMapper: oidc-usermodel-property-mapper
#     - config:
#         attribute.name: Role
#         attribute.nameformat: Basic
#         single: false
#       consentRequired: false
#       name: role list
#       protocol: saml
#       protocolMapper: saml-role-list-mapper
#     attributes:
#       saml.authnstatement: True
#       saml.client.signature: True
#       saml.force.post.binding: True
#       saml.server.signature: True
#       saml.signature.algorithm: RSA_SHA256
#       saml.signing.certificate: CERTIFICATEHERE
#       saml.signing.private.key: PRIVATEKEYHERE
#       saml_force_name_id_format: False
#       saml_name_id_format: username
#       saml_signature_canonicalization_method: "http://www.w3.org/2001/10/xml-exc-c14n#"
#       user.info.response.signature.alg: RS256
#       request.object.signature.alg: RS256
#       use.jwks.url: true
#       jwks.url: JWKS_URL_FOR_CLIENT_AUTH_JWT
#       jwt.credential.certificate: JWT_CREDENTIAL_CERTIFICATE_FOR_CLIENT_AUTH
