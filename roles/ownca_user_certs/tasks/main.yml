---
# ==================================================================================================
#
# This playbook contains common plays that will be run on all nodes.
#
# References:
# - https://tools.ietf.org/html/draft-moskowitz-eddsa-pki-00
# - https://pki-tutorial.readthedocs.io/en/latest/expert/index.html
#
# CAs:
# - Root:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   ...
#
# ==================================================================================================
- name: "Include OS-specific variables."
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no

- name: "Install packages"
  ansible.builtin.package:
    pkg: "{{ packages }}"
    state: present
  become: yes
  register: result

- name: "Get IP geolocation data"
  community.general.ipinfoio_facts:
  become: no

# ==================================================================================================
#
# Create SSL Private Key and CRS Directories
#
# Creates the following Directories:
#   - ~/.pki/private
#   - ~/.pki/csr
#   - ~/.pki/certs
#   - ~/.pki/pkcs12
#   - ~/.pki/ssh
#
# Since this is on the file server, we need to determine how not to reset the ACLs when ensuring
# the folders exist.
#
# Need to modify to also create ~./pki and use ~/.ssh instead of ~/.pki/ssh
#
# ==================================================================================================
- name: "Create user pki directories"
  ansible.builtin.file:
    path: "{{ __user_pki_dir }}/{{ item[1].name }}"
    state: directory
    owner: "{{ __id_number }}"
    group: "{{ __id_number }}"
    mode: "{{ item[1].mode }}"
  become: yes
  loop: "{{ domain_users | product(ownca_user_pki_dirs) | list }}"
  vars:
    __username: "{{ item[0].username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_pki_dir: "{{ __user_home_dir }}/{{ ownca_user_pki_dir }}"
    __id_number: "{{ item[0].id_number }}" 
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# ==================================================================================================
#
# Create User Private Key
#
# ==================================================================================================
- name: "Generate user private key"
  community.crypto.openssl_privatekey:
    path: "{{ __user_private_dir }}/{{ __username }}.key"
    type: "{{ ownca_privatekey_type }}"
    owner: "{{ __id_number }}"
    group: "{{ __id_number }}"
    cipher: auto
    size: 2048
    mode: "0600"
    force: no
    passphrase: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    backup: yes
  become: yes
  loop: "{{ domain_users }}"
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ item.username }}/password"
    __username: "{{ item.username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ item.username }}"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __id_number: "{{ item.id_number }}" 
  when:
    - item.id_number is defined
    - item.spns is not defined

# ==================================================================================================
#
# Create Network CA Certificate
#
# ==================================================================================================
- name: Generate User CSRs
  community.crypto.openssl_csr:
    country_name: "{{ rebeldream_country }}"
    state_or_province_name: "{{ rebeldream_region }}"
    locality_name: "{{ rebeldream_city }}"
    organization_name: "{{ rebeldream_org_name }}"
    organizational_unit_name: "{{ rebeldream_org_unit_name }}"
    common_name: "{{ __given_name }}{{ __surname }}"
    email_address: "{{ __email }}"
    key_usage: "{{ item[1].key_usage }}"
    key_usage_critical: yes
    extended_key_usage: "{{ item[1].extended_key_usage }}"
    privatekey_path: "{{ __user_private_dir }}/{{ __username }}.key"
    privatekey_passphrase: "{{ __password }}"
    subject_alt_name: "{{ __san }}"
    crl_distribution_points:
      - full_name: "URI:{{ ownca_crl_distribution_point }}/{{ __crl_file }}"
        reasons:
          - key_compromise
          - ca_compromise
          - affiliation_changed
          - superseded
          - cessation_of_operation
          - certificate_hold
          - privilege_withdrawn
          - aa_compromise
    path: "{{ __user_csr_dir }}/{{ __username }}_{{ item[1].name }}.csr"
    owner: "{{ __id_number }}"
    group: "{{ __id_number }}"
    mode: "0644"
    backup: yes
    force: no
  become: yes
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ item[0].username }}/password"
    __password: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    __username: "{{ item[0].username }}"
    __public_email: "{{ item[0].username }}@{{ rebeldream_root_domain }}"
    __given_name: "{{ item[0].given_name | default(item[0].username) | title }}"
    __surname: "{% if item[0].surname is defined %} {{ item[0].surname }}{% else %}{% endif %}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __user_csr_dir: "{{ __user_home_dir }}/{{ ownca_user_csr_dir }}"
    __id_number: "{{ item[0].id_number }}"
    __user_principal_name: "{{ item[0].username }}@{{ rebeldream_domain }}"
    #__email: "{% if item[1].name == 'authentication' %}{{ __user_principal_name }}{% else %}{{ __public_email }}{%endif %}"
    __email: "{{ __public_email }}"
    __san_auth: "otherName:{{ msupn }};UTF8:{{ __user_principal_name }}"
    __san_email: "email:{{ __email }}"
    __san: "{{ __san_email }}{% if item[1].name == 'authentication' %},{{ __san_auth }}{%endif %}"
    __crl_file: "{{ rebeldream_org_name }}-{{ rebeldream_org_unit_name }}-identity.crl"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# ==================================================================================================
#
# Create User Certificates
#
# ==================================================================================================
- name: "Fetch CSRs"
  ansible.builtin.fetch:
    src: "{{ ownca_home_dir }}/{{ __username }}/.pki/csr/{{ __username }}_{{ item[1].name }}.csr"
    dest: "{{ ownca_directory }}/users/csr/{{ __username }}_{{ item[1].name }}.csr"
    flat: yes
  become: yes
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __username: "{{ item[0].username }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

- name: "Generate User Certificates"
  community.crypto.x509_certificate:
    path: "{{ ownca_directory }}/users/certs/{{ __username }}_{{ item[1].name }}.crt"
    csr_path: "{{ ownca_directory }}/users/csr/{{ __username }}_{{ item[1].name }}.csr"
    ownca_path: "{{ ownca_identity_ca_file }}"
    ownca_privatekey_path: "{{ ownca_identity_ca_key }}"
    ownca_privatekey_passphrase: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    provider: ownca
    backup: yes
    force: no
  become: no
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  delegate_to: localhost
  register: result
  vars:
    __password_store_id: "{{ rebeldream_domain }}/ownca/ownca_identity_password"
    __password_lookup: "{{ __password_store_id }}"
    __username: "{{ item[0].username }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# - name: "Get old certificate information"
#   community.crypto.x509_certificate_info:
#     path: "{{ item.backup_file }}"
#   loop: "{{ result.results }}"
#   register: certs
#   when:
#     - result.results is defined
#     - item.backup_file is defined

# - name: Add serial number to crl database
#   ansible.builtin.blockinfile:
#     dest: "{{ ownca_ca_directory }}/db/{{ rebeldream_org_name }}-{{ rebeldrream_org_unit_name }}-identity-ca.crl.srl"
#     block: |
#       - serial_number: {{ item.serial_number }}
#         revocation_date: "{{ lookup('pipe','date --utc +%Y%m%d%H%M%S') }}Z"
#         reason: "{{ __reason }}"
#   loop: "{{ certs.results }}"
#   var:
#     __reason_default: "superseded"
#     __reason_key: "{% if __force_cert_regen %}key_compromise{% else %}{{ __reason_default }}{% endif %}"
#     __reason_ca: "{% if __force_ca_regen %}ca_compromise{% else %}{{ __reason_key }}{% endif %}"
#     __reason: "{{ __reason_ca }}"
#   when:
#     - cert.results is defined
#     - item.serial_number is defined

- name: Copy User Certificates to workstation.
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/certs/{{ __username }}_{{ item[1].name }}.crt"
    dest: "{{ __user_cert_dir }}/{{ __username }}_{{ item[1].name }}.crt"
    owner: "{{ __id_number }}"
    group: "{{ __id_number }}"
    mode: "0644"
  become: yes
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __username: "{{ item[0].username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_cert_dir: "{{ __user_home_dir }}/{{ ownca_user_cert_dir }}"
    __id_number: "{{ item[0].id_number }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

- name: Generate PKCS#12 files
  community.crypto.openssl_pkcs12:
    action: export
    friendly_name: "{{ __given_name }}{{ __surname }}({{ item[1].name | title }})"
    path: "{{ __pki_pkcs12_file }}"
    privatekey_path: "{{ __pki_privatekey_file }}"
    privatekey_passphrase: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    certificate_path: "{{ __pki_cert_file }}"
    other_certificates:
      - "{{ ownca_etc }}/certs/{{ rebeldream_org_name }}-{{ rebeldream_org_unit_name }}-identity-ca.pem"
      - "{{ ownca_etc }}/certs/{{ rebeldream_org_name }}-{{ rebeldream_org_unit_name }}-ca.pem"
      - "{{ ownca_etc }}/certs/{{ rebeldream_org_name }}-root-ca.pem"
    state: present
    owner: "{{ __id_number }}"
    group: "{{ __id_number }}"
    mode: "0600"
    backup: yes
    force: no
  become: yes
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/{{ item[0].username }}/password"
    __username: "{{ item[0].username }}"
    __id_number: "{{ item[0].id_number }}"
    __given_name: "{{ item[0].given_name | default(item[0].username) | title }}"
    __surname: "{% if item[0].surname is defined %} {{ item[0].surname }} {% else %}{% endif %}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_cert_dir: "{{ __user_home_dir }}/{{ ownca_user_cert_dir }}"
    __pki_cert_file: "{{ __user_cert_dir }}/{{ __username }}_{{ item[1].name }}.crt"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __pki_privatekey_file: "{{ __user_private_dir }}/{{ __username }}.key"
    __user_pkcs12_dir: "{{ __user_home_dir }}/{{ ownca_user_pkcs12_dir }}"
    __pki_pkcs12_file: "{{ __user_pkcs12_dir }}/{{ __username }}_{{ item[1].name }}.p12"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined
  tags:
    - user-pkcs11

- name: "Convert User Certificates to DER"
  ansible.builtin.command:
    cmd: >
      openssl x509 -in "{{ item[0].username }}_{{ __cert_purpose }}.crt"
      -inform PEM
      -out "{{ item[0].username }}_{{ __cert_purpose }}.der"
      -outform DER
    chdir: "{{ __pki_cert_dir }}"
    creates: "{{ item[0].username }}_{{ __cert_purpose }}.der"
  loop: "{{ domain_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __pki_cert_dir: "{{ ownca_directory }}/users/certs"
    __cert_purpose: "{{ item[1].name }}"
  delegate_to: localhost
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined
  tags:
    - der
