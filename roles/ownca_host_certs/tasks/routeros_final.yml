---
- name: "Ensure we have a PKCS12 password for the Host"
  ansible.builtin.set_fact:
    ownca_host_cert_pkcs12_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/hosts/{{ inventory_hostname_short }}/ownca_host_cert_pkcs12_password"
    __password_length: "length={{ item.password_legnth | default(autonomy_password_length) }}"
    __password_overwrite: "overwrite={{ autonomy_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  #delegate_to: localhost
  when:
    - ownca_host_certs_pkcs12_password == "password"
  tags:
    - ownca_host_certs
    - ownca-host-certs
    - ownca_host_certs_debug
    - ownca-host-certs-debug

- name: Generate PKCS#12 file
  community.crypto.openssl_pkcs12:
    action: export
    backup: yes
    path:  "{{ ownca_hosts_directory }}/pkcs12/{{ inventory_hostname }}.pkcs12"
    friendly_name: "{{ inventory_hostname_short }}"
    passphrase: "{{ ownca_host_cert_pkcs12_password }}"
    privatekey_path: "{{ ownca_hosts_directory }}/private/{{ inventory_hostname }}.key"
    certificate_path: "{{ ownca_hosts_directory }}/certs/{{ inventory_hostname }}-chain.crt"
    other_certificates:
      - "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ autonomy_org_unit_name }}-component-ca.crt"
      - "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ autonomy_org_unit_name }}-ca.crt"
      - "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-root-ca.crt"
    state: present
    iter_size: 0
    maciter_size: 0
    mode: '0600'
    owner: "{{ autonomy_user }}"
    group: "{{ autonomy_user }}"
    #force: yes
  become: no
  delegate_to: localhost
  tags:
    - ownca_host_certs
    - ownca-host-certs
    - ownca_host_certs_debug
    - ownca-host-certs-debug
    - ownca-bundles
    - ownca-all

# ==================================================================================================
#
# https://wiki.mikrotik.com/wiki/Manual:Create_Certificates
#
# ==================================================================================================

# ==================================================================================================
#
# Tasks: Copy Host Certificate back to Server.
#  
#
# ==================================================================================================
# # ======================================================================
# #
# # Temporarily allow ftp access to upload cert
# #
# # ======================================================================
# - name: Allow access to ftp
#   routeros_command:
#     commands:
#       - /ip service enable ftp


# - name: Copy Host Certificate back to server.
#   copy:
#     src: "{{ ownca_hosts_directory }}/certs/{{ item }}.crt"
#     dest: "/usr/local/share/ca-certificates/"
#   become: yes
#   loop:
#     - "{{ inventory_hostname }}"
#     - "{{ inventory_hostname }}-chain"
#   notify: restart all
#   tags:
#     - ownca_host_certs
#     - ownca-host-certs
#     - ownca_host_certs_debug
#     - ownca-host-certs-debug
#     - ownca-all


# - name: Copy CA Certificates to server.
#   copy:
#     src: "{{ ownca_ca_directory }}/certs/{{ item }}"
#     dest: "/usr/local/share/ca-certificates/"
#   loop:
#     - "{{ autonomy_org_name }}-root-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-component-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-identity-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-component-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[0] }}-identity-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-component-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-identity-ca-chain.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-component-ca.crt"
#     - "{{ autonomy_org_name }}-{{ autonomy_zones[1] }}-identity-ca.crt"
#   become: yes
#   notify: restart all
#   tags:
#     - ownca_host_certs
#     - ownca-host-certs
#     - ownca_host_certs_debug
#     - ownca-host-certs-debug
#     - ownca-all

# - name: Copy CRLs to server.
#   copy:
#     src: "{{ ownca_directory }}/certificate_authorities/crl/{{ autonomy_org_name }}-{{ item.name }}.crl"
#     dest: "{{ ownca_etc }}/crls/{{ autonomy_org_name }}-{{ item.name }}.crl"
#   loop: "{{ ownca_certificate_authorities }}"
#   become: yes
#   tags:
#     - ownca_crl
#     - ownca-crl
#     - ownca_crl_debug
#     - ownca-crl-debug

# # # ======================================================================
# # #
# # # Tasks:
# # #  
# # #
# # # ======================================================================
# # - name: Copy certificates back to server.
# #   shell:
# #     "{{ item }}"
# #   with_items:
# #     - "curl -T {{ ca_directory }}/certs/{{ ansible_hostname }}.crt ftp://{{ ansible_host }} --user {{ ansible_user }}:{{ ansible_password }}"
# #     - "curl -T {{ ca_directory }}/private/{{ ansible_hostname }}.key ftp://{{ ansible_host }} --user {{ ansible_user }}:{{ ansible_password }}" 
# #     - "curl -T {{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-root-ca.crt ftp://{{ ansible_host }} --user {{ ansible_user }}:{{ ansible_password }}"
# #     - "curl -T {{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-{{ autonomy_domain.split('.')[0] }}-ca-chain.crt ftp://{{ ansible_host }} --user {{ ansible_user }}:{{ ansible_password }}"
# #     - "curl -T {{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-{{ autonomy_domain.split('.')[0] }}-component-ca-chain.crt ftp://{{ ansible_host }} --user {{ ansible_user }}:{{ ansible_password }}"

# # # ======================================================================
# # #
# # # Disable ftp access
# # #
# # # ======================================================================
# # - name: Disable access to ftp
# #   routeros_command:
# #     commands:
# #       - /ip service disable ftp

# # # ======================================================================
# # #
# # # Temporarily allow ftp access to upload cert
# # #
# # # ======================================================================
# # - name: Allow Import Certs
# #   routeros_command:
# #     commands:
# #       - "/certificate import file-name={{ ca_directory }}/certs/{{ ansible_hostname }}.crt"
# #       - "/certificate import file-name={{ ca_directory }}/private/{{ ansible_hostname }}.key"
# #       - "/certificate import file-name={{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-root-ca.crt"
# #       - "/certificate import file-name={{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-{{ autonomy_domain.split('.')[0] }}-ca-chain.crt"
# #       - "/certificate import file-name={{ ca_directory }}/certs/{{ autonomy_domain.split('.')[1] }}-{{ autonomy_domain.split('.')[0] }}-component-ca-chain.crt"

