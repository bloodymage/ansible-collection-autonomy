---
- name: "Pre-tasks"
  block:
    - name: Include OS-specific variables.
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: "{{ __os_variables_files }}"
          paths:
            - "vars"
      become: no

- name: "Include OS Family Preparation Tasks."
  include: "{{ ansible_os_family | lower }}_prep.yml"
  when:
    - ansible_network_os is not defined
    - ansible_os_family is defined
    - not ownca_generate_locally
  become: no

- name: "Include Localhost Preparation Tasks."
  include: "localhost_prep.yml"
  when:
    - ansible_network_os is defined or ownca_generate_locally
  become: no

- name: "Ensure we have a password for the Component Issuing CA."
  ansible.builtin.set_fact:
    ownca_component_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/ownca/ownca_component_password"
    __password_lookup: "{{ __password_store_id }}"
  become: no
  delegate_to: localhost

# ==================================================================================================
#
# The next four tasks ensure we regenerate the host certificate if the issuing certificate is newer
# than the host certificate.
#
# ==================================================================================================
- name: "Get component CA certificate information."
  community.crypto.x509_certificate_info:
    path: "{{ ownca_component_ca_file }}"
  become: no
  register: component_cert
  delegate_to: localhost

- name: "Check if host cert exists"
  ansible.builtin.stat:
    path: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}.crt"
  delegate_to: localhost
  become: no
  register: cert_file

- name: "Get host certificate information"
  community.crypto.x509_certificate_info:
    path: "{{ cert_file.stat.path }}"
  become: no
  delegate_to: localhost
  register: host_cert
  when:
    - cert_file.stat is defined
    - cert_file.stat.exists is true
    - cert_file.stat.path is defined

# ==================================================================================================
#
# We want to check if these match, because if they don't we need to force regeneration of the host's
# certificate.  A mismatch typically happens when the issuing CA's cert has been updated while the
# host's certificate has not.
#
# ==================================================================================================
- name: "Check if the host's cert authority_key_identifier matches the Component CA's subject_key_identifier."
  ansible.builtin.set_fact:
    __host_cert_force_regeneration: yes
  become: no
  when:
    - host_cert.authority_key_identifier is defined
    - host_cert.authority_key_identifier != component_cert.subject_key_identifier

- name: "Generate Host Certificate"
  community.crypto.x509_certificate:
    path: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}.crt"
    csr_path: "{{ ownca_hosts_directory }}/csr/{{ autonomy_fqdn }}.csr"
    ownca_path: "{{ ownca_component_ca_file }}"
    ownca_privatekey_path: "{{ ownca_component_ca_key }}"
    ownca_privatekey_passphrase: "{{ ownca_component_password }}"
    provider: ownca
    backup: yes
    force: "{{ __host_cert_force_regeneration }}"
  become: no
  delegate_to: localhost

- name: "Identify Certificate Complete Chain."
  community.crypto.certificate_complete_chain:
    input_chain: "{{ lookup('file', ownca_hosts_directory + '/certs/' + autonomy_fqdn + '.crt') }}"
    intermediate_certificates:
      - "{{ ownca_component_ca_file }}"
      - "{{ ownca_intermediate_ca_cert }}"
    root_certificates:
      - "{{ ownca_ca_certs_directory }}/{{ autonomy_org_name }}-root-ca.crt"
  register: parent_cert_authorities
  become: no
  delegate_to: localhost

# ==================================================================================================
#
# TODO: Need to identify if the chain has actually changed before writing the new chain file.
#
# ==================================================================================================
- name: "Write complete chain to disk."
  ansible.builtin.copy:
    dest: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}-chain.crt"
    content: "{{ ''.join(parent_cert_authorities.complete_chain) }}"
    owner: "{{ __autonomy_user }}"
    group: "{{ __autonomy_user }}"
    mode: "0600"
  become: no
  delegate_to: localhost
  when:
    - parent_cert_authorities.complete_chain is defined

- name: "Include OS Family Tasks."
  include: "{{ ansible_os_family | lower }}_final.yml"
  when:
    - ansible_network_os is not defined
    - ansible_os_family is defined
    - not ownca_generate_locally
  become: no

- name: "Include NetworkOS Tasks."
  include: "{{ ansible_network_os.split('.')[2] | lower }}_final.yml"
  become: no
  when:
    - ansible_network_os is defined
    - not ownca_generate_locally

- name: "Include Local tasks."
  include: "localhost_final.yml"
  become: no
  when:
    - ownca_generate_locally

- name: "Copy CA Certificates Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca.crt"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca.crt"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])

- name: "Copy CA Certificate Chains Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.crt"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.crt"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])
    - item.name != "root"

- name: "Copy CA Certificates Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca.der"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])

- name: "Copy CA Certificate Chains Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.der"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])
    - item.name != "root"
