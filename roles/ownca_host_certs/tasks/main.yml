---
- name: "Pre-tasks"
  block:
    - name: Include OS-specific variables.
      include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files: "{{ __os_variables_files }}"
          paths:
            - "vars"
      become: no

- name: "Add subject alt names based on ipv6."
  ansible.builtin.set_fact:
    ownca_host_certs_subject_alt_name: "{{ ownca_host_certs_subject_alt_name + [__alt_name] }}"
  vars:
    __alt_name: "IP:{{ autonomy_ipv6_address }}"
  when:
    - autonomy_ipv6_address is defined
    - autonomy_ipv6_address is truthy

- name: "Add subject alt names based on role."
  ansible.builtin.set_fact:
    ownca_host_certs_subject_alt_name: "{{ ownca_host_certs_subject_alt_name + __alt_name }}"
  become: no
  loop:
    - name: "db_servers"
      alt_name: "db"
    - name: "dns_servers"
      alt_name: "ns"
    - name: "file_servers"
      alt_name: "fs"
    - name: "git_servers"
      alt_name: "git"
    - name: "homeassistant"
      alt_name: "home"
    - name: "auth_servers"
      alt_name: "auth"
    - name: "ldap_servers"
      alt_name: "ldap"
    - name: "mail_servers"
      alt_name: "mail"
    - name: "dovecot_servers"
      alt_name: "imap"
    - name: "postfix_servers"
      alt_name: "smtp"
    - name: "dlna_servers"
      alt_name: "dlna"
    - name: "mosquitto_servers"
      alt_name: "mqtt"
    - name: "radius_servers"
      alt_name: "radius"
    - name: "redis_servers"
      alt_name: "redis"
    - name: "samba_domain_controllers"
      alt_name: "dc"
    - name: "web_servers"
      alt_name: "www"
    - name: "zwavecontrollers"
      alt_name: "zwave"
  vars:
    __group_id: "{{ autonomy_zone_name }}_{{ item.name }}"
    __host_index: "{{ groups[__group_id].index(inventory_hostname) + 1 }}"
    __padded_index: "{{ '%02d' % __host_index | int }}"
    __alt_name:
      - "DNS:{{ item.alt_name }}{{ __padded_index }}.{{ autonomy_domain }}"
      - "DNS:{{ item.alt_name }}.{{ autonomy_domain }}"
  when:
    - inventory_hostname in groups[item.name] | default([])

- name: "Add hardware based subject alt names."
  ansible.builtin.set_fact:
    ownca_host_certs_subject_alt_name: "{{ ownca_host_certs_subject_alt_name + __alt_name }}"
  become: no
  loop:
    - name: "routers"
      alt_name: "router"
    - name: "printers"
      alt_name: "printer"
  vars:
    __group_id: "{{ autonomy_zone_name }}_{{ item.name }}"
    __host_index: "{{ groups[__group_id].index(inventory_hostname) + 1 }}"
    __group_size: "{{ groups[__group_id] | length }}"
    __padded_index: "{% if __group_size != 1%}{{ '%02d' % __host_index | int }}{% else %}{% endif %}"
    __alt_name:
      - "DNS:{{ item.alt_name }}{{ __padded_index }}.{{ autonomy_domain }}"
  when:
    - inventory_hostname in groups[item.name] | default([])

- name: "Add additional subject alt names for samba domain controllers."
  ansible.builtin.set_fact:
    ownca_host_certs_subject_alt_name: "{{ ownca_host_certs_subject_alt_name + __alt_name }}"
  vars:
    __alt_name:
      - "DNS:{{ autonomy_domain }}"
      - "otherName:{{ ownca_msadguid_oid }};UTF8:{{ ownca_objectguid }}"
  when:
    - inventory_hostname in groups['samba_domain_controllers'] | default([])

- name: "Set extended key usage based on role."
  ansible.builtin.set_fact:
    ownca_host_certs_extended_key_usage: "{{ ownca_host_certs_extended_key_usage + [item.extended_key_uasge] }}"
  become: no
  loop:
    - name: "samba_domain_controllers"
      extended_key_uasge: "{{ ownca_mskdc_oid }}"
  when:
    - inventory_hostname in groups[item.name] | default([])

- name: "Add intermediate Certificate Authorities."
  ansible.builtin.set_fact:
    ownca_certificate_authorities: "{{ ownca_certificate_authorities + [__certificate_authority] }}"
  loop: "{{ autonomy_zones }}"
  vars:
    ownca_intermediate_ca_key_file: "{{ autonomy_org_name }}-{{ item.name }}-ca.key"
    __certificate_authority:
      name: "{{ item.name }}"
      common_name: "{{ autonomy_org_name | title }} {{ item.name | title }} CA"
      ownca: "root"
      provider: "ownca"
      ca_id: "intermediate"
      zone_name: "{{ item.name }}."
      keyusage:
        - keyCertSign
        - cRLSign
      keyusage_critical: yes
      basic_constraints:
        - 'CA:TRUE'
      private_key_path: "{{ ownca_ca_private_key_directory }}/{{ ownca_intermediate_ca_key_file }}"
      org_unit_name: "{{ item.name }}"
  when:
    - item.type != "public"

- name: "Add issuing Certificate Authorities."
  ansible.builtin.set_fact:
    ownca_certificate_authorities: "{{ ownca_certificate_authorities + [__certificate_authority] }}"
  loop: "{{ autonomy_zones | product(ownca_issuing_authorities) }}"
  vars:
    ownca_issuing_ca_key_file: "{{ autonomy_org_name }}-{{ item[0].name }}-{{ item[1] }}-ca.key"
    __certificate_authority:
      name: "{{ item[0].name }}-{{ item[1] }}"
      common_name: "{{ autonomy_org_name | title }} {{ item[0].name | title }} {{ item[1] | title}} CA"
      ownca: "intermediate"
      provider: "ownca"
      ca_id: "{{ item[1] }}"
      zone_name: "{{ item[0].name }}."
      keyusage:
        - keyCertSign
        - cRLSign
      keyusage_critical: yes
      basic_constraints:
        - 'CA:TRUE'
      private_key_path: "{{ ownca_ca_private_key_directory }}/{{ ownca_issuing_ca_key_file }}"
      org_unit_name: "{{ item[0].name }}"
  when:
    - item[0].type != "public"

- name: "Include OS Family Preparation Tasks."
  include: "{{ ansible_os_family | lower }}_prep.yml"
  when:
    - ansible_network_os is not defined
    - ansible_os_family is defined
    - not ownca_generate_locally
  become: no

- name: "Include Localhost Preparation Tasks."
  include: "localhost_prep.yml"
  when:
    - ansible_network_os is defined or ownca_generate_locally
  become: no

- name: "Ensure we have a password for the Component Issuing CA."
  ansible.builtin.set_fact:
    ownca_component_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  vars:
    __password_store_id: "{{ autonomy_domain }}/ownca/ownca_component_password"
    __password_lookup: "{{ __password_store_id }}"
  become: no
  delegate_to: localhost

# ==================================================================================================
#
# The next four tasks ensure we regenerate the host certificate if the issuing certificate is newer
# than the host certificate.
#
# ==================================================================================================
- name: "Get component CA certificate information."
  community.crypto.x509_certificate_info:
    path: "{{ ownca_component_ca_cert_path }}"
  become: no
  register: component_cert
  delegate_to: localhost

- name: "Check if host cert exists."
  ansible.builtin.stat:
    path: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}.crt"
  delegate_to: localhost
  become: no
  register: cert_file

- name: "Get host certificate information."
  community.crypto.x509_certificate_info:
    path: "{{ cert_file.stat.path }}"
  become: no
  delegate_to: localhost
  register: host_cert
  when:
    - cert_file.stat is defined
    - cert_file.stat.exists is true
    - cert_file.stat.path is defined

# ==================================================================================================
#
# We want to check if these match, because if they don't we need to force regeneration of the host's
# certificate.  A mismatch typically happens when the issuing CA's cert has been updated while the
# host's certificate has not.
#
# ==================================================================================================
- name: "Check if the host's cert authority_key_identifier matches the Component CA's subject_key_identifier."
  ansible.builtin.set_fact:
    __host_cert_force_regeneration: yes
  become: no
  when:
    - host_cert.authority_key_identifier is defined
    - host_cert.authority_key_identifier != component_cert.subject_key_identifier

- name: "Generate Host Certificate."
  community.crypto.x509_certificate:
    path: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}.crt"
    csr_path: "{{ ownca_hosts_directory }}/csr/{{ autonomy_fqdn }}.csr"
    ownca_path: "{{ ownca_component_ca_cert_path }}"
    ownca_privatekey_path: "{{ ownca_component_ca_key_path }}"
    ownca_privatekey_passphrase: "{{ ownca_component_password }}"
    provider: ownca
    backup: yes
    force: "{{ __host_cert_force_regeneration }}"
  become: no
  delegate_to: localhost

- name: "Identify Certificate Complete Chain."
  community.crypto.certificate_complete_chain:
    input_chain: "{{ lookup('file', ownca_hosts_directory + '/certs/' + autonomy_fqdn + '.crt') }}"
    intermediate_certificates:
      - "{{ ownca_component_ca_cert_path }}"
      - "{{ ownca_intermediate_ca_cert_path }}"
    root_certificates:
      - "{{ ownca_ca_certs_directory }}/{{ autonomy_org_name }}-root-ca.crt"
  register: parent_cert_authorities
  become: no
  delegate_to: localhost

# ==================================================================================================
#
# TODO: Need to identify if the chain has actually changed before writing the new chain file.
#
# ==================================================================================================
- name: "Write complete chain to disk."
  ansible.builtin.copy:
    dest: "{{ ownca_hosts_directory }}/certs/{{ autonomy_fqdn }}-chain.crt"
    content: "{{ ''.join(parent_cert_authorities.complete_chain) }}"
    owner: "{{ __autonomy_user }}"
    group: "{{ __autonomy_user }}"
    mode: "0600"
  become: no
  delegate_to: localhost
  when:
    - parent_cert_authorities.complete_chain is defined

- name: "Include OS Family Tasks."
  include: "{{ ansible_os_family | lower }}_final.yml"
  when:
    - ansible_network_os is not defined
    - ansible_os_family is defined
    - not ownca_generate_locally
  become: no

- name: "Include NetworkOS Tasks."
  include: "{{ ansible_network_os.split('.')[2] | lower }}_final.yml"
  become: no
  when:
    - ansible_network_os is defined
    - not ownca_generate_locally

- name: "Include Local tasks."
  include: "localhost_final.yml"
  become: no
  when:
    - ownca_generate_locally

- name: "Copy CA Certificates Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca.crt"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca.crt"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])

- name: "Copy CA Certificate Chains Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.crt"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.crt"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])
    - item.name != "root"

- name: "Copy CA Certificates Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca.der"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])

- name: "Copy CA Certificate Chains Samba File Server."
  ansible.builtin.copy:
    src: "{{ ownca_ca_directory }}/certs/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.der"
    dest: "/srv/samba/pki/{{ autonomy_org_name }}-{{ item.name }}-ca-chain.cer"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ ownca_certificate_authorities }}"
  become: yes
  when:
    - inventory_hostname == groups['samba_file_servers'][0] | default([])
    - item.name != "root"
