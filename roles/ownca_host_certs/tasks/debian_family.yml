---
# This playbook contains common plays that will be run on all nodes.
# ==================================================================================================
#
# References:
# - https://tools.ietf.org/html/draft-moskowitz-eddsa-pki-00
# - https://pki-tutorial.readthedocs.io/en/latest/expert/index.html
#
# CAs:
# - Root:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   ...
#
# ==================================================================================================
- name: Install required packages for ansible configuration
  package:
    name: "{{ packages }}"
    state: present
  become: yes
  tags:
    - ownca-hosts-certs

# ==================================================================================================
#
# Create SSL Private Key and CRS Directories
#
# Creates the following Directories:
#   - /etc/ssl/private mode: 0700
#   - /etc/ssl/csr     mode: 0700
#   - /etc/ssl/certs   mode: 0755
#
# ==================================================================================================
- name: "Create SSL Directories"
  file:
    path: '{{ etc }}/{{ item.name }}'
    state: directory
    owner: root
    group: root
    mode: "{{ item.mode }}"
  become: yes
  loop: "{{ ownca_host_certs_directories }}"
  tags:
    - ownca-hosts-certs

# ==================================================================================================
#
# Create Host Key
#
# ==================================================================================================
- name: Generate Host Private Key
  openssl_privatekey:
    path: '/etc/ssl/private/{{ inventory_hostname }}.key'
    type: '{{ ca_type }}'
    size: 4096
    owner: root
    group: root
    mode: '0600'
    force: no
  become: yes
  tags:
    - ownca-hosts-certs

# ==================================================================================================
#
# Create Host CSR
#
#
# ==================================================================================================
- name: Generate Host CSR
  community.crypto.openssl_csr:
    path: "/etc/ssl/csr/{{ ansible_fqdn }}.csr"
    mode: "0644"
    owner: root
    group: root
    country_name: "{{ loc_country_code }}"
    state_or_province_name: "{{ loc_st }}"
    locality_name: "{{ loc_city }}"
    organization_name: "{{ ca_org_name }}"
    organizational_unit_name: "{{ ca_org_unit_name }}"
    common_name: "{{ ansible_fqdn }}"
    key_usage: "{{ ownca_host_certs_key_usage }}"
    key_usage_critical: yes
    extended_key_usage: "{{ ownca_host_certs_extended_key_usage }}"
    extended_key_usage_critical: yes
    privatekey_path: "/etc/ssl/private/{{ inventory_hostname }}.key"
    subject_alt_name: "{{ ownca_host_certs_subject_alt_name }}"
  become: yes
  tags:
    - ownca-hosts-certs

# ==================================================================================================
#
# Tasks:
#  
#
# ==================================================================================================
- name: Fetch CSRs.
  fetch:
    src: "/etc/ssl/csr/{{ inventory_hostname }}.csr"
    dest: "{{ ca_directory }}/csr/"
    flat: yes
  become: yes
  tags:
    - ownca-hosts-certs

# ==================================================================================================
#
# Create Host Certificate
#
# ==================================================================================================
- name: Generate Host Certificate
  community.crypto.x509_certificate:
    path: "{{ ca_directory }}/certs/{{ inventory_hostname }}.crt"
    csr_path: "{{ ca_directory }}/csr/{{ inventory_hostname }}.csr"
    ownca_path: "{{ ca_directory }}/certs/{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca.crt"
    ownca_privatekey_path: "{{ ca_directory }}/private/{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca.key"
    ownca_privatekey_passphrase: "{{ ownca_component_password }}"
    provider: ownca
  become: no
  delegate_to: localhost
  tags:
    - ownca-hosts-certs

# ======================================================================
#
# Tasks: Copy Host Certificate back to Server.
#  
#
# ======================================================================
- name: Copy Host Certificate back to server.
  copy:
    src: "{{ ca_directory }}/certs/{{ inventory_hostname }}.crt"
    dest: "/usr/local/share/ca-certificates/"
  become: yes
  tags:
    - ownca-hosts-certs

# ======================================================================
#
# Tasks:
#  
#
# ======================================================================
- name: Copy CA Certificates to server.
  copy:
    src: "{{ ca_directory }}/certs/{{ item }}"
    dest: "/usr/local/share/ca-certificates/"
  loop:
    - "{{ ansible_domain.split('.')[1] }}-root-ca.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-ca-chain.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca-chain.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-identity-ca-chain.crt"
  become: yes
  tags:
    - ownca-hosts-certs

- name: Convert CA Certs to DER
  command: "openssl x509 -in {{ item }}.crt -inform PEM -out {{ item }}.der -outform DER"
  become: no
  loop:
    - "{{ ca_directory }}/certs/{{ ansible_domain.split('.')[1] }}-root-ca"
    - "{{ ca_directory }}/certs/{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-ca-chain"
    - "{{ ca_directory }}/certs/{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca-chain"
    - "{{ ca_directory }}/certs/{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-identity-ca-chain"
  delegate_to: localhost
  run_once: yes
  tags:
    - ownca-hosts-certs

- name: Copy CA Certificates Samba File Server.
  copy:
    src: "{{ ca_directory }}/certs/{{ item }}"
    dest: "/srv/samba/pki/"
  loop:
    - "{{ ansible_domain.split('.')[1] }}-root-ca.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-ca-chain.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca-chain.crt"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-identity-ca-chain.crt"
    - "{{ ansible_domain.split('.')[1] }}-root-ca.der"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-ca-chain.der"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-component-ca-chain.der"
    - "{{ ansible_domain.split('.')[1] }}-{{ ansible_domain.split('.')[0] }}-identity-ca-chain.der"
  become: yes
  when:
    - inventory_hostname == "aphrodite.olympus.drbr.org"
  tags:
    - ownca-hosts-certs

# ======================================================================
#
# Task: Update System CA Certificates
#  
#
# ======================================================================
- name: Update System CA Certificates
  shell:
    "{{ item }}"
  loop:
    - "update-ca-certificates"
  become: yes
  tags:
    - ownca-hosts-certs
