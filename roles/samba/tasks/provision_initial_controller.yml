# ==================================================================================================
#
# Provision First Active Directory Domain Controller
#
# TODO: This also needs to happen if the realm does not exist
#
# ==================================================================================================
- name: "Provision First Active Directory Domain Controller"
  ansible.builtin.command:
    cmd: >
      samba-tool domain provision
      --server-role=dc
      --use-rfc2307
      --dns-backend="{{ samba_dns_backend }}"
      --realm="{{ autonomy_domain | upper }}"
      --domain="{{ autonomy_org_unit_name | upper }}"
      --adminpass="{{ samba_administrator_password }}"
  register: samba_ad_created
  become: yes
  notify:
    - "restart bind"
    - "start samba-ad-dc"
  when:
    - __samba_recreate_realm

- name: "Configure smb.conf file."
  ansible.builtin.template:
    src: "smb.conf.j2"
    dest: "/etc/samba/smb.conf"
    owner: root
    group: root
    mode: 0644
    validate: "/usr/bin/testparm -s %s"
  become: yes
  notify: restart samba
  when:
    - __samba_recreate_realm
    - autonomy_fqdn == __samba_schema_master

- name: "Ensure services are in proper state after package installation."
  ansible.builtin.meta: flush_handlers

- name: "Create Reverse Zone."
  ansible.builtin.command:
    cmd: >
      samba-tool dns zonecreate localhost
      "{{ ansible_host.split('.')[1] }}.{{ ansible_host.split('.')[0] }}.in-addr.arpa"
      -U administrator
      --password="{{ samba_administrator_password }}"
  become: yes
  ignore_errors: yes
  when:
    - autonomy_fqdn == __samba_schema_master

# ==================================================================================================
#
# Test Active Directory Domain Controller
#
# ==================================================================================================
- name: "(Tests) List all shares provided by the DC."
  ansible.builtin.command:
    cmd: "smbclient -L localhost -U%"
  register: shares
  become: yes
  when:
    - autonomy_fqdn == __samba_schema_master

# - name: Verify SMB Authentication
#   shell: "smbclient //localhost/netlogon -UAdministrator -c 'ls' --password={{ samba_administrator_password }}"
#   register: success
#   become: yes
#   when: autonomy_fqdn == __samba_schema_master
#   ignore_errors: yes

#- debug:
#    var: success
#    verbosity: 2

- name: "(Tests) Tcp-based _ldap SRV record in the domain."
  ansible.builtin.command:
    cmd: "host -t SRV _ldap._tcp.{{ autonomy_domain }}."
  register: success
  become: yes
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "(Tests) udp-based _kerberos SRV resource record in the domain."
  ansible.builtin.command:
    cmd: "host -t SRV _kerberos._udp.{{ autonomy_domain }}."
  register: success
  become: yes
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "(Tests) The A record of the domain controller."
  ansible.builtin.command:
    cmd: "host -t A {{ ansible_fqdn }}."
  register: success
  become: yes
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "(Tests) KDC get ticket."
  ansible.builtin.expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "(Tests) KDC verify ticket."
  ansible.builtin.command:
    cmd: "klist"
  register: success
  become: no
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "(Tests) The PTR record of the domain controller."
  ansible.builtin.command:
    cmd: "host -t PTR {{ ansible_host }}"
  register: success
  become: yes
  when:
    - autonomy_fqdn == __samba_schema_master

- name: "Ensure we have the correct permissionss on /var/lib/samba/usershares."
  ansible.builtin.file:
    path: "/var/lib/samba/usershares"
    owner: "root"
    group: "sambashare"
    mode: "1755"
  become: yes
