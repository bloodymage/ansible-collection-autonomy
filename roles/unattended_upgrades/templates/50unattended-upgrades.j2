// {{ ansible_managed }}
{# // Unattended-Upgrade::Origins-Pattern controls which packages are #}
{# // upgraded. #}
{# // #}
{# // Lines below have the format "keyword=value,...".  A #}
{# // package will be upgraded only if the values in its metadata match #}
{# // all the supplied keywords in a line.  (In other words, omitted #}
{# // keywords are wild cards.) The keywords originate from the Release #}
{# // file, but several aliases are accepted.  The accepted keywords are: #}
{# //   a,archive,suite (eg, "stable") #}
{# //   c,component     (eg, "main", "contrib", "non-free") #}
{# //   l,label         (eg, "Debian", "Debian-Security") #}
{# //   o,origin        (eg, "Debian", "Unofficial Multimedia Packages") #}
{# //   n,codename      (eg, "jessie", "jessie-updates") #}
{# //     site          (eg, "http.debian.net") #}
{# // The available values on the system are printed by the command #}
{# // "apt-cache policy", and can be debugged by running #}
{# // "unattended-upgrades -d" and looking at the log file. #}
{# // #}
{# // Within lines unattended-upgrades allows 2 macros whose values are #}
{# // derived from /etc/debian_version: #}
{# //   ${distro_id}            Installed origin. #}
{# //   ${distro_codename}      Installed codename (eg, "buster") #}
Unattended-Upgrade::Origins-Pattern {
        {# // Codename based matching: #}
        {# // This will follow the migration of a release through different #}
        {# // archives (e.g. from testing to stable and later oldstable). #}
        {# // Software will be the latest available for the named release, #}
        {# // but the Debian release itself will not be automatically upgraded. #}
//      "origin=Debian,codename=${distro_codename}-updates";
//      "origin=Debian,codename=${distro_codename}-proposed-updates";
        "origin=Debian,codename=${distro_codename},label=Debian";
        "origin=Debian,codename=${distro_codename},label=Debian-Security";
        "origin=Debian,codename=${distro_codename}-security,label=Debian-Security";

        {# // Archive or Suite based matching: #}
        {# // Note that this will silently match a different release after #}
        {# // migration to the specified archive (e.g. testing becomes the #}
        {# // new stable). #}
//      "o=Debian,a=stable";
//      "o=Debian,a=stable-updates";
//      "o=Debian,a=proposed-updates";
//      "o=Debian Backports,a=${distro_codename}-backports,l=Debian Backports";
};

{# // Python regular expressions, matching packages to exclude from upgrading #}
Unattended-Upgrade::Package-Blacklist {
{% for package in unattended_upgrades_blacklist %}
  {{ package }}
{% endfor %}
};

{# // This option allows you to control if on a unclean dpkg exit #}
{# // unattended-upgrades will automatically run  #}
{# //   dpkg --force-confold --configure -a #}
{# // The default is true, to ensure updates keep getting installed #}
//Unattended-Upgrade::AutoFixInterruptedDpkg "true";
{# // Split the upgrade into the smallest possible chunks so that #}
{# // they can be interrupted with SIGTERM. This makes the upgrade #}
{# // a bit slower but it has the benefit that shutdown while a upgrade #}
{# // is running is possible (with a small delay) #}
//Unattended-Upgrade::MinimalSteps "true";
{# // Install all updates when the machine is shutting down #}
{# // instead of doing it in the background while the machine is running. #}
{# // This will (obviously) make shutdown slower. #}
{# // Unattended-upgrades increases logind's InhibitDelayMaxSec to 30s. #}
{# // This allows more time for unattended-upgrades to shut down gracefully #}
{# // or even install a few packages in InstallOnShutdown mode, but is still a #}
{# // big step back from the 30 minutes allowed for InstallOnShutdown previously. #}
{# // Users enabling InstallOnShutdown mode are advised to increase #}
{# // InhibitDelayMaxSec even further, possibly to 30 minutes. #}
//Unattended-Upgrade::InstallOnShutdown "false";
{% if unattended_upgrades_mail_to != __unattended_upgrades_mail_to -%}
  Unattended-Upgrade::Mail {{ unattended_upgrades_mail_to }};
{% if unattended_upgrades_mail_report != __unattended_upgrades_mail_report -%}
  Unattended-Upgrade::MailReport "{{ unattended_upgrades_mail_report }}";
{% endif %}
{% endif %}
{% if unattended_upgrades_remove_unused_kernel_packages != __unattended_upgrades_remove_unused_kernel_packages -%}
  Unattended-Upgrade::Remove-Unused-Kernel-Packages "{{ unattended_upgrades_remove_unused_kernel_packages }}";
{% endif %}
{% if unattended_upgrades_remove_new_unused_dependencies != unattended_upgrades_remove_new_unused_dependencies -%}
  Unattended-Upgrade::Remove-New-Unused-Dependencies "{{ unattended_upgrades_remove_new_unused_dependencies }}";
{% endif %}
{% if unattended_upgrades_remove_unused_dependencies != __unattended_upgrades_remove_unused_dependencies -%}
  Unattended-Upgrade::Remove-Unused-Dependencies "{{ unattended_upgrades_remove_unused_dependencies }}";
{% endif %}
{% if unattended_upgrades_automatic_reboot != __unattended_upgrades_automatic_reboot -%}
  Unattended-Upgrade::Automatic-Reboot "{{ unattended_upgrades_automatic_reboot }}";
{% endif %}
{% if unattended_upgrades_automatic_reboot_with_users != __unattended_upgrades_automatic_reboot_with_users -%}
  Unattended-Upgrade::Automatic-Reboot-WithUsers "{{ unattended_upgrades_automatic_reboot_with_users }}";
{% endif %}
{% if unattended_upgrades_automatic_reboot_time != __unattended_upgrades_automatic_reboot_time -%}
  Unattended-Upgrade::Automatic-Reboot-Time "{{ unattended_upgrades_automatic_reboot_time }}";
{% endif %}
{# // Use apt bandwidth limit feature, this example limits the download #}
{# // speed to 70kb/sec #}
//Acquire::http::Dl-Limit "70";
{% if unattended_upgrades_syslog_enable != __unattended_upgrades_syslog_enable -%}
  Unattended-Upgrade::SyslogEnable "{{ unattended_upgrades_syslog_enable }}";
{% endif %}
{% if unattended_upgrades_syslog_facility != __unattended_upgrades_syslog_facility -%}
  Unattended-Upgrade::SyslogFacility "{{ unattended_upgrades_syslog_facility }}";
{% endif %}
{# // Download and install upgrades only on AC power #}
{# // (i.e. skip or gracefully stop updates on battery) #}
// Unattended-Upgrade::OnlyOnACPower "true";
{# // Download and install upgrades only on non-metered connection #}
{# // (i.e. skip or gracefully stop updates on a metered connection) #}
// Unattended-Upgrade::Skip-Updates-On-Metered-Connections "true";
{# // Verbose logging #}
// Unattended-Upgrade::Verbose "false";
{# // Print debugging information both in unattended-upgrades and #}
{# // in unattended-upgrade-shutdown #}
// Unattended-Upgrade::Debug "false";
{# // Allow package downgrade if Pin-Priority exceeds 1000 #}
// Unattended-Upgrade::Allow-downgrade "false";
{# // When APT fails to mark a package to be upgraded or installed try adjusting #}
{# // candidates of related packages to help APT's resolver in finding a solution #}
{# // where the package can be upgraded or installed. #}
{# // This is a workaround until APT's resolver is fixed to always find a #}
{# // solution if it exists. (See Debian bug #711128.) #}
{# // The fallback is enabled by default, except on Debian's sid release because #}
{# // uninstallable packages are frequent there. #}
{# // Disabling the fallback speeds up unattended-upgrades when there are #}
{# // uninstallable packages at the expense of rarely keeping back packages which #}
{# // could be upgraded or installed. #}
// Unattended-Upgrade::Allow-APT-Mark-Fallback "true";
