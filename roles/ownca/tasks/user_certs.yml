---
# ==================================================================================================
#
# This playbook contains common plays that will be run on all nodes.
#
# References:
# - https://tools.ietf.org/html/draft-moskowitz-eddsa-pki-00
# - https://pki-tutorial.readthedocs.io/en/latest/expert/index.html
#
# CAs:
# - Root:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   - Network:
#     - Identity:
#     - Encryption:
#     - Component:
#     - Code Signing:
#   ...
#
# ==================================================================================================
- name: "Create SSL Directories."
  ansible.builtin.file:
    path: "{{ ownca_directory }}/users/{{ item.name }}"
    state: directory
    owner: "{{ autonomy_user }}"
    group: "{{ autonomy_group }}"
    mode: "{{ item.mode }}"
  loop: "{{ ownca_user_directories }}"
  become: no
  delegate_to: localhost
  run_once: yes

# ==================================================================================================
#
# Create SSL Private Key and CRS Directories
#
# Creates the following Directories:
#   - ~/.pki/private
#   - ~/.pki/csr
#   - ~/.pki/certs
#   - ~/.pki/pkcs12
#   - ~/.pki/ssh
#
# Since this is on the file server, we need to determine how not to reset the ACLs when ensuring
# the folders exist.
#
# Need to modify to also create ~./pki and use ~/.ssh instead of ~/.pki/ssh
#
# ==================================================================================================
- name: "Create user pki directories."
  ansible.builtin.file:
    path: "{{ __user_pki_dir }}/{{ item[1].name }}"
    state: directory
    owner: "{{ item[0].username }}"
    group: "{{ item[0].username }}_g"
    #group: "{{ autonomy_org_unit_name | upper }}\\unixadmins"
    #mode: "{{ item[1].mode }}"
    mode: "0750"
  become: yes
  loop: "{{ __realm_users | product(ownca_user_pki_dirs) | list }}"
  vars:
    __username: "{{ item[0].username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_pki_dir: "{{ __user_home_dir }}/{{ ownca_user_pki_dir }}"
    __id_number: "{{ item[0].id_number }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# ==================================================================================================
#
# Create User Private Key
#
# ==================================================================================================
- name: "Generate user private key."
  community.crypto.openssl_privatekey:
    path: "{{ __user_private_dir }}/{{ __username }}.key"
    type: "{{ ownca_privatekey_type }}"
    size: "{{ __size }}"
    cipher: auto
    passphrase: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    owner: "{{ item.username }}"
    group: "{{ item.username }}_g"
    #group: "{{ autonomy_org_unit_name | upper }}\\unixadmins"
    mode: "0640"
    state: present
    force: no
    backup: yes
  become: yes
  loop: "{{ __realm_users }}"
  vars:
    __size: "{% if ownca_privatekey_type == 'RSA' and ownca_privatekey_size > ownca_max_user_privatekey_size %}{{ ownca_max_user_privatekey_size }}{% else %}{{ ownca_privatekey_size }}{% endif %}"
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/domain_users/{{ item.username }}/password"
    __username: "{{ item.username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ item.username }}"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __id_number: "{{ item.id_number }}"
  when:
    - item.id_number is defined
    - item.spns is not defined

# ==================================================================================================
#
# Create Network CA Certificate
#
# mode is '0770' to key the samba file server happy with 'ADS' authentication.
#
# ==================================================================================================
- name: "Generate User CSRs."
  community.crypto.openssl_csr:
    country_name: "{{ autonomy_country | default(omit) }}"
    state_or_province_name: "{{ autonomy_region | default (omit) }}"
    locality_name: "{{ autonomy_city | default(omit) }}"
    organization_name: "{{ autonomy_org_name }}"
    organizational_unit_name: "{{ autonomy_org_unit_name }}"
    common_name: "{{ item[0]['display_name'] }}"
    email_address: "{{ __email }}"
    key_usage: "{{ item[1].key_usage }}"
    key_usage_critical: yes
    extended_key_usage: "{{ item[1].extended_key_usage }}"
    privatekey_path: "{{ __user_private_dir }}/{{ __username }}.key"
    privatekey_passphrase: "{{ __password }}"
    subject_alt_name: "{{ __san }}"
    crl_distribution_points:
      - full_name: "URI:{{ ownca_crl_distribution_point }}/{{ __crl_file }}"
        reasons:
          - key_compromise
          - ca_compromise
          - affiliation_changed
          - superseded
          - cessation_of_operation
          - certificate_hold
          - privilege_withdrawn
          - aa_compromise
    path: "{{ __user_csr_dir }}/{{ __username }}_{{ item[1].name }}.csr"
    owner: "{{ item[0].username }}"
    group: "{{ item[0].username }}_g"
    #group: "{{ autonomy_org_unit_name | upper }}\\unixadmins"
    mode: "0640"
    state: present
    backup: yes
    force: "{{ __user_cert_force_regeneration }}"
  become: yes
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/domain_users/{{ item[0].username }}/password"
    __password: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    __username: "{{ item[0].username }}"
    __public_email: "{{ item[0].username }}@{{ autonomy_root_domain }}"
    __given_name: "{{ item[0].given_name | default(item[0].username) | title }}"
    __surname: "{% if item[0].surname is defined %} {{ item[0].surname }}{% else %}{% endif %}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __user_csr_dir: "{{ __user_home_dir }}/{{ ownca_user_csr_dir }}"
    __id_number: "{{ item[0].id_number }}"
    __user_principal_name: "{{ item[0].username }}@{{ autonomy_domain }}"
    __email: "{{ __public_email }}"
    __san_auth: "otherName:{{ ownca_msupn_oid }};UTF8:{{ __user_principal_name }}"
    __san_other_mail: "{% if item[0].email_aliases is defined %}{{ item[0].email_aliases | map('regex_replace', '^', 'email:') | list }}{% else %}[]{% endif %}"
    __san_mail: "email:{{ __email }}"
    __san_email: "{{ [__san_mail] + __san_other_mail }}"
    __san: "{% if item[1].name == 'authentication' %}{{ __san_mail }},{{ __san_auth }}{% else %}{{ __san_email }}{%endif %}"
    __crl_file: "{{ autonomy_org_name }}-{{ autonomy_org_unit_name }}-identity.crl"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# ==================================================================================================
#
# Create User Certificates
#
# ==================================================================================================
- name: "Fetch CSRs."
  ansible.builtin.fetch:
    src: "{{ ownca_home_dir }}/{{ __username }}/.pki/csr/{{ __username }}_{{ item[1].name }}.csr"
    dest: "{{ ownca_directory }}/users/csr/{{ __username }}_{{ item[1].name }}.csr"
    flat: yes
  become: yes
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __username: "{{ item[0].username }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

- name: "Get identity certificate information."
  community.crypto.x509_certificate_info:
    path: "{{ ownca_identity_ca_cert_path }}"
  become: no
  register: identity_cert
  delegate_to: localhost

- name: "Check if user cert exists."
  ansible.builtin.stat:
    path: "{{ ownca_directory }}/users/certs/{{ __username }}_{{ item[1].name }}.crt"
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  delegate_to: localhost
  become: no
  register: cert_file
  vars:
    __username: "{{ item[0].username }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

- name: "Check if we are regenerating user certs."
  ansible.builtin.set_fact:
    __user_cert_force_regeneration: yes
  become: no
  changed_when: __user_cert_force_regeneration
  tags:
    - never
    - regenerate-user-certs

- name: "Generate User Certificates."
  community.crypto.x509_certificate:
    path: "{{ ownca_directory }}/users/certs/{{ __username }}_{{ item[1].name }}.crt"
    csr_path: "{{ ownca_directory }}/users/csr/{{ __username }}_{{ item[1].name }}.csr"
    ownca_path: "{{ ownca_identity_ca_cert_path }}"
    ownca_privatekey_path: "{{ ownca_identity_ca_key_path }}"
    ownca_privatekey_passphrase: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
    provider: ownca
    backup: yes
    owner: "{{ autonomy_user }}"
    group: "{{ autonomy_group }}"
    mode: "0644"
    state: present
    force: "{{ __user_cert_force_regeneration }}"
  become: no
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  delegate_to: localhost
  register: result
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/ownca/ownca_identity_password"
    __password_lookup: "{{ __password_store_id }}"
    __username: "{{ item[0].username }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

# - name: "Get old certificate information"
#   community.crypto.x509_certificate_info:
#     path: "{{ item.backup_file }}"
#   loop: "{{ result.results }}"
#   register: certs
#   when:
#     - result.results is defined
#     - item.backup_file is defined

# - name: Add serial number to crl database
#   ansible.builtin.blockinfile:
#     dest: "{{ ownca_ca_directory }}/db/{{ autonomy_org_name }}-{{ rebeldrream_org_unit_name }}-identity-ca.crl.srl"
#     block: |
#       - serial_number: {{ item.serial_number }}
#         revocation_date: "{{ lookup('pipe','date --utc +%Y%m%d%H%M%S') }}Z"
#         reason: "{{ __reason }}"
#   loop: "{{ certs.results }}"
#   var:
#     __reason_default: "superseded"
#     __reason_key: "{% if __force_cert_regen %}key_compromise{% else %}{{ __reason_default }}{% endif %}"
#     __reason_ca: "{% if __force_ca_regen %}ca_compromise{% else %}{{ __reason_key }}{% endif %}"
#     __reason: "{{ __reason_ca }}"
#   when:
#     - cert.results is defined
#     - item.serial_number is defined

- name: Copy User Certificates to workstation.
  ansible.builtin.copy:
    src: "{{ ownca_directory }}/users/certs/{{ __username }}_{{ item[1].name }}.crt"
    dest: "{{ __user_cert_dir }}/{{ __username }}_{{ item[1].name }}.crt"
    owner: "{{ item[0].username }}"
    group: "{{ item[0].username }}_g"
    #group: "{{ autonomy_org_unit_name | upper }}\\unixadmins"
    mode: "0640"
  become: yes
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __username: "{{ item[0].username }}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_cert_dir: "{{ __user_home_dir }}/{{ ownca_user_cert_dir }}"
    __id_number: "{{ item[0].id_number }}"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined

- name: Generate PKCS#12 files
  community.crypto.openssl_pkcs12:
    action: export
    friendly_name: "{{ __given_name }}{{ __surname }} ({{ item[1].name | title }})"
    path: "{{ __pki_pkcs12_file }}"
    privatekey_path: "{{ __pki_privatekey_file }}"
    privatekey_passphrase: "{{ lookup('community.general.passwordstore', __password_store_id) }}"
    certificate_path: "{{ __pki_cert_file }}"
    other_certificates:
      - "/usr/local/share/ca-certificates/{{ autonomy_org_name }}-{{ autonomy_org_unit_name }}-identity-ca.crt"
      - "/usr/local/share/ca-certificates/{{ autonomy_org_name }}-{{ autonomy_org_unit_name }}-ca.crt"
      - "/usr/local/share/ca-certificates/{{ autonomy_org_name }}-root-ca.crt"
    state: present
    owner: "{{ item[0].username }}"
    group: "{{ item[0].username }}_g"
    #group: "{{ autonomy_org_unit_name | upper }}\\unixadmins"
    mode: "0640"
    backup: yes
    force: no
  become: yes
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __password_store_id: "{{ autonomy_passdb }}/{{ autonomy_domain }}/domain_users/{{ item[0].username }}/password"
    __username: "{{ item[0].username }}"
    __id_number: "{{ item[0].id_number }}"
    __given_name: "{{ item[0].given_name | default(item[0].username) | title }}"
    __surname: "{% if item[0].surname is defined %} {{ item[0].surname }}{% else %}{% endif %}"
    __user_home_dir: "{{ ownca_home_dir }}/{{ __username }}"
    __user_cert_dir: "{{ __user_home_dir }}/{{ ownca_user_cert_dir }}"
    __pki_cert_file: "{{ __user_cert_dir }}/{{ __username }}_{{ item[1].name }}.crt"
    __user_private_dir: "{{ __user_home_dir }}/{{ ownca_user_private_dir }}"
    __pki_privatekey_file: "{{ __user_private_dir }}/{{ __username }}.key"
    __user_pkcs12_dir: "{{ __user_home_dir }}/{{ ownca_user_pkcs12_dir }}"
    __pki_pkcs12_file: "{{ __user_pkcs12_dir }}/{{ __username }}_{{ item[1].name }}.p12"
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined
  tags:
    - user-pkcs11

- name: "Convert User Certificates to DER"
  ansible.builtin.command:
    cmd: >
      openssl x509 -in "{{ item[0].username }}_{{ __cert_purpose }}.crt"
      -inform PEM
      -out "{{ item[0].username }}_{{ __cert_purpose }}.der"
      -outform DER
    chdir: "{{ __pki_cert_dir }}"
    #creates: "{{ item[0].username }}_{{ __cert_purpose }}.der"
  loop: "{{ __realm_users | product(ownca_user_cert_purposes) | list }}"
  vars:
    __pki_cert_dir: "{{ ownca_directory }}/users/certs"
    __cert_purpose: "{{ item[1].name }}"
  delegate_to: localhost
  when:
    - item[0].id_number is defined
    - item[0].spns is not defined
  tags:
    - der
