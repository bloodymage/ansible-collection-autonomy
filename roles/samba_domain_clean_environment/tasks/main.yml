---
# tasks file for samba_domain_clean_environment
# ==================================================================================================
#
# Ensure samba is not currently running on the host system.
#
# Steps:
#   1. Identify the processes
#
#
#
# Ref: https://stackoverflow.com/questions/46515704/how-to-kill-a-running-process-using-ansible
# ==================================================================================================
- name: Get running processes
  ansible.builtin.shell:
    cmd: >
      set -o pipefail &&
      ps -ef |
      grep -v grep |
      egrep 'samba|smbd|nmbd|winbindd' |
      awk '{print $2}'
    executable: "/bin/bash"
  register: running_processes
  failed_when:
    - running_processes.stderr is truthy
  become: yes
  when:
    - __samba_recreate_realm

- name: "Kill running processes"
  ansible.builtin.command:
    cmd: "kill {{ item }}"
  loop: "{{ running_processes.stdout_lines }}"
  become: yes
  ignore_errors: yes
  when:
    - __samba_recreate_realm

- name: "Wait for all processes to be killed"
  ansible.builtin.wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  loop: "{{ running_processes.stdout_lines }}"
  ignore_errors: yes
  register: killed_processes
  become: yes
  when:
    - __samba_recreate_realm

- name: Force kill stuck processes
  ansible.builtin.command:
    cmd: "kill -9 {{ item }}"
  loop: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  become: yes
  ignore_errors: yes
  when:
    - __samba_recreate_realm

# ==================================================================================================
#
# Ensure config file does not already exists
#
# ==================================================================================================
- name: Identify config file if it exists
  ansible.builtin.shell:
    cmd: >
      set -o pipefail &&
      {{ __samba_smbd_bin }} -b |
      grep "CONFIGFILE" |
      cut -d: -f2 |
      tr -s "[:blank:]"
    executable: "/bin/bash"
  register: config_file
  become: no
  when:
    - __samba_recreate_realm

- name: Print Variables
  ansible.builtin.debug:
    var: config_file
    verbosity: 2
  become: no
  when:
    - __samba_recreate_realm

- name: Remove config file
  ansible.builtin.file:
    path: "{{ config_file }}"
    state: absent
  when:
    - __samba_recreate_realm

# ==================================================================================================
#
# Ensure Samba databases do not exists
#
# ==================================================================================================
# - name: Identify samba database directories
#   shell:
#     cmd: "set -o pipefail && smbd -b | egrep 'LOCKDIR|STATEDIR|CACHEDIR|PRIVATE_DIR'|cut -d: -f2| sed -e 's/^[[:space:]]*//'"
#     executable: "/bin/bash"
#   register: database_directories

- name: "Identify samba database files"
  ansible.builtin.find:
    paths: "{{ item }}"
    pattern: "*.tdb,*.ldb"
  loop:
    - "/var/run/samba"
    - "/var/lib/samba"
    - "/var/cache/samba"
    - "/var/lib/samba/private"
  become: yes
  register: __database
  when:
    - __samba_recreate_realm

- name: Show __database.results
  ansible.builtin.debug:
    msg:
      - "{{ item }}"
    verbosity: 3
  loop: "{{ __database.results }}"
  when:
    - __samba_recreate_realm
    - __database is defined

- name: Show __database
  ansible.builtin.debug:
    msg:
      - "{{ __database }}"
    verbosity: 4
  when:
    - __samba_recreate_realm
    - __database is defined

- name: "Remove database files"
  include: "remove_files.yml"
  become: no
  loop: "{{ __database.results }}"
  loop_control:
    loop_var: __directory
  when:
    - __samba_recreate_realm
    - __database is defined

- name: "Remove old sysvol"
  ansible.builtin.file:
    path: "/usr/lib/samba/sysvol"
    state: absent
  become: yes
  when:
    - __samba_recreate_realm
