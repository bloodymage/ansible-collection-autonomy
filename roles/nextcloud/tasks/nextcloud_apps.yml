# ==================================================================================================
#
# TODO: Turn this into a lookup (pipe lookup?)
#
# TODO: This uses the filesystem to identify apps. It really needs to get the list from nextcloud.
#       Simply because the app has files on the filesystem does not mean that it is enabled.  It
#       could be part of the base installation package, and therefore not removed when it was
#       disabled.
#
# ==================================================================================================
- name: Determine Existing App
  ansible.builtin.command:
    cmd: 'ls /srv/www/{{ inventory_hostname }}/apps'
  changed_when: false
  become: no
  register: existing_apps

- name: Install Nextcloud Apps
  ansible.builtin.command:
    cmd: "php occ app:install {{ item }}"
    chdir: "/srv/www/{{ inventory_hostname }}"
    creates: "/srv/www/{{ inventory_hostname }}/apps/{{ item }}/appinfo/info.xml"
  loop: "{{ nextcloud_apps }}"
  become: yes
  become_user: www-data

# ==================================================================================================
#
# Potentially enable '--force' to allow using outdate apps?
#
# ==================================================================================================
- name: Enable Nextcloud Apps
  ansible.builtin.command:
    cmd: "php occ app:enable --force {{ item }}"
    chdir: "/srv/www/{{ inventory_hostname }}"
  loop: "{{ nextcloud_apps }}"
  become: yes
  become_user: www-data

# ==================================================================================================
#
# This disables any previously selected app that is not in the currently seleceted apps list.
#
# This does check that removing the app will not break nextcloud completely.  A previous task
# created the list of existing_apps.  First we check it against the current list of apps we wish
# to be installed.  Removing any that aren't listed.  Then we check it against the mandatory apps,
# if the app is mandatory, we do not remove it.
#
# ==================================================================================================
- name: Disable Nextcloud Apps
  ansible.builtin.command:
    cmd: "php occ app:disable {{ item }}"
    chdir: "/srv/www/{{ inventory_hostname }}"
  loop: "{{ __disabled_apps }}"
  become: yes
  become_user: www-data
  vars:
    __currently_selected_apps: "{{ existing_apps.stdout_lines | difference(nextcloud_apps) }}"
    __disabled_apps: "{{ __currently_selected_apps | difference(__nextcloud_mandatory_apps) }}"

# ==================================================================================================
#
# Finally, we remove any app that is not part of the base install from the filesystem.
#
# ==================================================================================================
- name: "Remove disabled nextcloud apps from the filesystem"
  ansible.builtin.file:
    path: "/srv/www/{{ inventory_hostname }}/apps/{{ item }}"
    state: absent
  loop: "{{ __removed_apps }}"
  become: yes
  vars:
    __currently_selected_apps: "{{ existing_apps.stdout_lines | difference(nextcloud_apps) }}"
    __disabled_apps: "{{ __currently_selected_apps | difference(__nextcloud_mandatory_apps) }}"
    __removed_apps: "{{ __disabled_apps | difference(__nextcloud_default_apps) }}"

- name: "Ensure we have a clean nextcloud state before we do anything else."
  ansible.builtin.command:
    cmd: >
      php occ upgrade
    chdir: "/srv/www/{{ inventory_hostname }}"
  become: yes
  become_user: www-data

- name: "Upgrade Nextcloud Apps."
  ansible.builtin.command:
    cmd: "php occ app:update --all"
    chdir: "/srv/www/{{ inventory_hostname }}"
  become: yes
  become_user: www-data
