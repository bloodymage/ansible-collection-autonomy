---
# ==================================================================================================
#
# Needs complete re-write
#
# New role tasks:
# 1. Determine if we are to recreate the realm (tag "recreate-realm")
# 2. If yes, primary_domain_controller = groups['samba_domain_controllers'][0]
#    if not, primary_domain_controller = {{ discovered schema master domain_controller }},
#    ie, whichever domain controller is being used to manage the database
#    "samba-tool fsmo show | grep SchemaMasterRole"
#    Ref: https://wiki.samba.org/index.php/Setting_up_RFC2307_in_AD
# 3. If yes, clear samba database files
# 4. Install Samba
# 5. If yes, create first domain controller
# 6. All other hosts join domain
#
# ==================================================================================================
# TODO: Really check if already joined
- name: "Determine if host is already joined as a domain controller"
  ansible.builtin.set_fact:
    __samba_joined_as_domain_controller: yes
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', __password_lookup) }}"
  become: no
  vars:
    __password_store_id: "{{ rebeldream_domain }}/domain_users/administrator/password"
    __password_length: "length={{ item.password_legnth | default(rebeldream_password_length) }}"
    __password_overwrite: "overwrite={{ rebeldream_overwrite_password }} backup=yes"
    __password_create: "create=true"
    __password_symbols: "nosymbols=true"
    __password_lookup: "{{ __password_store_id }} {{ __password_create }} {{ __password_length }} {{ __password_symbols }} {{ __password_overwrite }}"
  when:
    - samba_administrator_password == "password"
  no_log: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Check Ansible Facts Password (WARNING: This will log the password)"
  ansible.builtin.debug:
    msg:
      - "{{ samba_administrator_password }}"
    verbosity: 1
  become: no
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ __os_variables_files }}"
      paths:
        - "vars"
  become: no
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
    - install-packages

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
    - install-packages

- name: "If we are regenerating the realm: include regeneration tasks"
  include: "recreate_realm.yml"
  become: no
  when:
    - __samba_recreate_realm
  tags:
    - never
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Provision First Active Directory Domain Controller
#
# TODO: This also needs to happen if the realm does not exist
#
# ==================================================================================================
- name: Provision First Active Directory Domain Controller
  command:
    cmd: >
      samba-tool domain provision
      --server-role=dc
      --use-rfc2307
      --dns-backend="{{ samba_dns_backend }}"
      --realm={{ rebeldream_domain | upper }}
      --domain="{{ rebeldream_org_unit_name | upper }}
      --adminpass="{{ samba_administrator_password }}"
  register: samba_ad_created
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Restart bind
  service:
    name: bind9
    state: restarted
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Configure smb.conf file"
  ansible.builtin.template:
    src: "smb.conf.j2"
    dest: "/etc/samba/smb.conf"
    owner: root
    group: root
    mode: 0644
  become: yes
  notify: restart samba-ad-dc
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "start samba-ad-dc"
  ansible.builtin.service:
    name: samba-ad-dc
    state: started
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Create Reverse Zone"
  command:
    cmd: >
      samba-tool dns zonecreate localhost
      "{{ ansible_host.split('.')[1] }}.{{ ansible_host.split('.')[0] }}.in-addr.arpa"
      -U administrator
      --password="{{ samba_administrator_password }}"
  become: yes
  ignore_errors: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "Add Domain Controller to Reverse Zone"
  command:
    cmd: >
      samba-tool dns add localhost
      "{{ ansible_host.split('.')[1] }}.{{ ansible_host.split('.')[0] }}.in-addr.arpa"
      "{{ ansible_host.split('.')[3] }}.{{ ansible_host.split('.')[2] }}"
      PTR "{{ rebeldream_fqdn }}"
      -U administrator
      --password="{{ samba_administrator_password }}"
  become: yes
  ignore_errors: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Active Directory Domain Controller
#
# ==================================================================================================
- name: "(Tests) List all shares provided by the DC"
  command:
    cmd: "smbclient -L localhost -U%"
  register: shares
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: Verify SMB Authentication
#   shell: "smbclient //localhost/netlogon -UAdministrator -c 'ls' --password={{ samba_administrator_password }}"
#   register: success
#   become: yes
#   when: rebeldream_fqdn == __samba_schema_master
#   ignore_errors: yes

#- debug:
#    var: success
#    verbosity: 2

- name: "(Tests) Tcp-based _ldap SRV record in the domain"
  command:
    cmd: "host -t SRV _ldap._tcp.{{ rebeldream_domain }}."
  register: success
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "(Tests) udp-based _kerberos SRV resource record in the domain"
  command:
    cmd: "host -t SRV _kerberos._udp.{{ rebeldream_domain }}."
  register: success
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) The A record of the domain controller"
  ansible.builtin.command:
    cmd: "host -t A {{ ansible_fqdn }}."
  register: success
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  ansible.builtin.command:
    cmd: "klist"
  register: success
  become: no
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) The PTR record of the domain controller"
  ansible.builtin.command:
    cmd: "host -t PTR {{ ansible_host }}"
  register: success
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  ansible.builtin.debug:
    msg: "{{ success }}"
    verbosity: 1
  become: no
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Add a little hardening
#
# https://fy.blackhats.net.au/blog/html/2018/04/18/making_samba_4_the_default_ldap_server.html
#
# ==================================================================================================
# - name: "Disallow any user to join host to AD"
#   shell: "{{ item }}"
#   register: success
#   become: yes
#   loop:
#     - "samba-tool domain settings account_machine_join_quota 0"
#   when: rebeldream_fqdn == __samba_schema_master
#   ignore_errors: yes

- name: "Disable Guest Account"
  ansible.builtin.command:
    cmd: "{{ item }}"
  register: success
  become: yes
  loop:
    - "samba-tool user disable Guest"
  ignore_errors: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Modify Password Policy: these should only be changed if we have a reason to suspect they are comprimised.
#
# https://dev.tranquil.it/samba/en/samba_advanced_methods/samba_password_policies.html
# https://oitibs.com/samba4-domain-password-policy/
#
# ==================================================================================================
- name: Set Password Expiration
  ansible.builtin.command:
    cmd: "samba-tool domain passwordsettings set --max-pwd-age={{ samba_domain_password_expiration }}"
  register: success
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  ignore_errors: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Kerberos
#
# ==================================================================================================
- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  ansible.builtin.command:
    cmd: "klist"
  register: success
  become: no
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  debug:
    msg: "{{ success }}"
    verbosity: 1
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm-debug

# ==================================================================================================
#
# Provision Active Directory Domain Controllers
#
# ==================================================================================================
- name: Provision Subsequent Active Directory Domain Controller
  ansible.builtin.command:
    cmd: >
      samba-tool domain join {{ rebeldream_domain }} DC
      --dns-backend=BIND9_DLZ
      -U'{{ rebeldream_org_unit_name | upper }}\administrator'
      --password={{ samba_administrator_password }}
  register: samba_ad_created
  become: yes
  notify: Update krb5
  when:
    - not __samba_joined_as_domain_controller
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Find idmap.ldb
#
# ==================================================================================================
# - name: Find idmap.ldb
#   find:
#     path: "/var"
#     pattern: idmap.ldb
#     recurse: yes
#   register: idmap_file
#   when: rebeldream_fqdn == __samba_schema_master

- name: Backup idmap.ldb
  command:
    cmd: "tdbbackup -s .bak /var/lib/samba/private/idmap.ldb"
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Fetch idmap.ldb
  ansible.builtin.fetch:
    src: "/var/lib/samba/private/idmap.ldb.bak"
    dest: "/tmp/idmap.ldb"
    flat: yes
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Copy idmap.ldb to New Servers
  ansible.builtin.copy:
    src: "/tmp/idmap.ldb"
    dest: "/var/lib/samba/private/idmap.ldb"
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Flush Net Cache on New DC
  command:
    cmd: "net cache flush"
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Syncronize Sysvol to New Servers
#
# Command Equivalent:
# - /usr/bin/rsync -XAavz --delete-after -f"+ */" -f"- *"  /var/lib/samba/sysvol root@DC2:/var/lib/samba
#
# References:
# - https://wiki.samba.org/index.php/Bidirectional_Rsync/Unison_based_SysVol_replication_workaround
#
# ==================================================================================================
# - name: "Sync Sysvol to new servers"
#   synchronize:
#     src: "/var/lib/samba/sysvol"
#     dest: "/var/lib/samba"
#     archive: yes
#     compress: yes
#     rsync_opts:
#       - "--xattrs"
#       - "--acls"
#       - "--delete-after"
#       - '--filter="+ */"'
#       - '--filter="- *"'
#   delegate_to: "{{ __samba_schema_master }}"
#   when: rebeldream_fqdn != __samba_schema_master

- name: Reset Samba ACLs on Sysvol for New
  ansible.builtin.command:
    cmd: "samba-tool ntacl sysvolreset"
  become: yes
  when:
    - __samba_recreate_realm
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Configure user.map file
  ansible.builtin.template:
    src: "user_map.j2"
    dest: /etc/samba/user.map
    owner: root
    group: root
    mode: 0644
  become: yes
  notify: restart samba-ad-dc
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: start samba-ad-dc
  service:
    name: samba-ad-dc
    state: started
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Active Directory Domain Controllers
#
# - Verify Samba Sysvol Replication
#   Reference: https://wiki.samba.org/index.php/Verifying_the_Directory_Replication_Statuses
#
# ==================================================================================================
- name: (Tests) Verify Sysvol Replication
  ansible.builtin.command:
    cmd: "samba-tool drs showrepl"
  become: yes
  when:
    - rebeldream_fqdn != __samba_schema_master
  notify: restart bind
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) List all shares provided by the Domain Controller
  ansible.builtin.command:
    cmd: "smbclient -L localhost -U%"
  register: shares
  become: yes
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: Verify SMB Authentication
#   shell: "smbclient //localhost/netlogon -UAdministrator -c 'ls' --password={{ samba_administrator_password }}"
#   register: success
#   become: yes
#   when: rebeldream_fqdn != __samba_schema_master
#   ignore_errors: yes

#- debug:
#    var: success
#    verbosity: 2

- name: (Tests) The A record of the domain controller"
  ansible.builtin.command:
    cmd: "host -t A {{ ansible_fqdn }}."
  register: success
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "(Tests) udp-based _kerberos SRV resource record in the domain"
  ansible.builtin.command:
    cmd: "host -t SRV _kerberos._udp.{{ rebeldream_domain }}."
  register: success
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  ansible.builtin.command:
    cmd: "klist"
  register: success
  become: no
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  ansible.builtin.debug:
    msg:
      - "{{ success }}"
    verbosity: 1
  become: no
  when:
    - rebeldream_fqdn != __samba_schema_master
  tags:
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm-debug

# ==================================================================================================
#
# Configure automated Sysvol Replication
#
# References:
#   - https://wiki.samba.org/index.php/SysVol_replication_(DFS-R)
#   - https://wiki.samba.org/index.php/Bidirectional_Rsync/Unison_based_SysVol_replication_workaround
#
# ==================================================================================================
- name: Make Control Directory
  ansible.builtin.file:
    path: "~/.ssh/ctl"
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create SSH Control Configuration
  ansible.builtin.template:
    src: "control_ssh.j2"
    dest: "~/.ssh/ctl/config"
    owner: root
    group: root
    mode: "0644"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Log File
  ansible.builtin.file:
    path: "/var/log/sysvol-sync.log"
    state: touch
    owner: root
    group: root
    mode: "0640"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Ensure unison configuration directory exists
  ansible.builtin.file:
    path: "~/.unison"
    state: directory
    owner: root
    group: root
    mode: "0750"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Unison Preferences
  ansible.builtin.template:
    src: "unison.j2"
    dest: "~/.unison/default.prf"
    owner: root
    group: root
    mode: "0644"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Backup of SysVol directory
  ansible.builtin.archive:
    path: /var/lib/samba/sysvol
    dest: ~/sysvol.tar.xz
    owner: "root"
    group: "root"
    mode: "0644"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: "Test Unison Synchronization"
#   shell: "/usr/bin/unison"
#   become: yes
#   register: success
#   when:
#     - rebeldream_fqdn == __samba_schema_master
#   tags:
#     - samba_domain_controllers
#     - samba-domain-controllers
#     - samba_domain_controllers_debug
#     - samba-domain-controllers-debug

- name: Create Cron Sync
  cron:
    name: "Syncronize SysVol Directories"
    minute: "*/5"
    hour: "*"
    day: "*"
    weekday: "*"
    month: "*"
    job: "/usr/bin/unison -silent"
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Copy schema extensions to schema master
  ansible.builtin.template:
    src: "schema.ldif.j2"
    dest: "/tmp/{{ item.name }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop: "{{ samba_schema_extensions }}"
  become: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Currently, this gives an error if already installed, what is really needed is a way to test if
# installed, and if so, don't install again.
#
# ==================================================================================================
- name: Install schema extensions
  ansible.builtin.command:
    cmd: >
      ldbmodify
      -H /var/lib/samba/private/sam.ldb
      "/tmp/{{ item.name }}"
      --option='dsdb:schema update allowed'=true
  loop: "{{ samba_schema_extensions }}"
  become: yes
  ignore_errors: yes
  when:
    - rebeldream_fqdn == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
