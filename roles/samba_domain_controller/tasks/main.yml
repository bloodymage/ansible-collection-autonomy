---
# ==================================================================================================
#
# Needs complete re-write
#
# New role tasks:
# 1. Determine if we are to recreate the realm (tag "recreate-realm")
# 2. If yes, primary_domain_controller = groups['samba_domain_controllers'][0]
#    if not, primary_domain_controller = {{ discovered schema master domain_controller }},
#    ie, whichever domain controller is being used to manage the database
#    "samba-tool fsmo show | grep SchemaMasterRole"
#    Ref: https://wiki.samba.org/index.php/Setting_up_RFC2307_in_AD
# 3. If yes, clear samba database files
# 4. Install Samba
# 5. If yes, create first domain controller
# 6. All other hosts join domain
#
# ==================================================================================================
- name: Determine whether to force domain recreation
  ansible.builtin.set_fact:
    __samba_recreate_realm: yes
  become: no
  tags:
    - never
    - recreate-realm

- name: Determine if host is already joined as a domain controller
  ansible.builtin.set_fact:
    __samba_joined_as_domain_controller: yes
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ groups['samba_domain_controllers'][0] }}"
  become: no
  when:
    - __samba_recreate_realm
  tags:
    - never
    - recreate-realm

- name: Set Samba Schema Master For Realm Recreation
  command:
    cmd: "samba-tool fsmo show"
  register: __samba_schema_master_role
  run_once: yes
  become: yes
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] }}"
    verbosity: 1
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    msg:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[0] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[1] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[2] }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3] }}"
    verbosity: 2
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines[0]
    verbosity: 3
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role.stdout_lines
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    var: __samba_schema_master_role
    verbosity: 4
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master_list:
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[1].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[6].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[7].split('=')[1] | lower }}"
      - "{{ __samba_schema_master_role.stdout_lines[0].split(' ')[3].split(',')[8].split('=')[1] | lower }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Set Samba Schema Master For Realm Recreation
  ansible.builtin.set_fact:
    __samba_schema_master: "{{ __samba_schema_master_list | join('.') }}"
  become: no
  when:
    - not __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: Print Variables
  debug:
    msg:
      - "Schema Master: {{ __samba_schema_master }}"
    verbosity: 1
  become: no
  when:
    - __samba_schema_master_role is defined
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug

- name: "Ensure we have a password for the Samba Administrator account"
  ansible.builtin.set_fact:
    samba_administrator_password: "{{ lookup('community.general.passwordstore', password_store_id + ' create=true length=42 nosymbols=true') }}"
  vars:
    password_store_id: "{{ ansible_domain }}/domain_users/administrator/password"
  when:
    - samba_administrator_password == "password"
  no_log: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Include OS-specific variables.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_network_os | default(none) }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_distribution.split(' ')[0] | lower }}.yml"
        - "{{ ansible_os_family | lower }}_family.yml"
        - "{{ ansible_system | lower }}.yml"
        - main.yml
      paths:
        - "vars"
  become: no
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
    - install-packages

- name: "Install packages"
  ansible.builtin.package:
    name: "{{ packages }}"
    state: present
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
    - install-packages

# ==================================================================================================
#
# Ensure samba is not currently running on the host system.
#
# Steps:
#   1. Identify the processes
#
#
#
# Ref: https://stackoverflow.com/questions/46515704/how-to-kill-a-running-process-using-ansible
# ==================================================================================================
- name: Get running processes
  shell: >
    ps -ef |
    grep -v grep |
    egrep 'samba|smbd|nmbd|winbindd' |
    awk '{print $2}'
  register: running_processes
  become: yes
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Kill running processes
  shell: "kill {{ item }}"
  loop: "{{ running_processes.stdout_lines }}"
  become: yes
  ignore_errors: yes
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Wait for all processes to be killed
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  loop: "{{ running_processes.stdout_lines }}"
  ignore_errors: yes
  register: killed_processes
  become: yes
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Force kill stuck processes
  shell: "kill -9 {{ item }}"
  loop: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  become: yes
  ignore_errors: yes
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ======================================================================
#
# Ensure config file does not already exists
#
# ======================================================================
- name: Identify config file if it exists
  shell: >
    smbd -b |
    grep 'CONFIGFILE' |
    cut -d: -f2 |
    tr -s "[:blank:]"
  register: config_file
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Variables
  debug:
    var: config_file
    verbosity: 2
  when:
    - __samba_recreate_realm
  tags:
    - never
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm-debug

- name: Remove config file
  file:
    path: "{{ config_file }}"
    state: absent
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Ensure Samba databases do not exists
#
# ==================================================================================================
#- name: Identify samba database directories
#  shell: "smbd -b | egrep 'LOCKDIR|STATEDIR|CACHEDIR|PR0IVATE_DIR'|cut -d: -f2| sed -e 's/^[[:space:]]*//'"
#  register: database_directories

# - name: Identify samba database files
#   find:
#     path: "{{ item }}"
#     pattern: "*.tdb, *.ldb"
#   loop:
#     - "/var/run/samba"
#     - "/var/lib/samba"
#     - "/var/cache/samba"
#     - "/var/lib/samba/private"
#   become: yes
#   register: find_logs

# - name: List tdb files
#   debug:
#     var: "{{ item.path }}"
#     verbosity: 1
#   loop: "{{ find_logs.files }}"

# - name: Remove database files
#   file:
#     path: "{{ item.path }}"
#     state: absent
#   loop: "{{ find_logs.files }}"

- name: Remove database files
  shell:
    cmd: "rm *.tdb *.ldb"
    chdir: "{{ item }}"
  loop:
    - "/var/run/samba"
    - "/var/lib/samba"
    - "/var/cache/samba"
    - "/var/lib/samba/private"
  become: yes
  ignore_errors: yes
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# As a precaution, we remove the krb5.conf file
#
# ==================================================================================================
- name: Remove krb5.conf
  file:
    path: "/etc/krb5.conf"
    state: absent
  when:
    - __samba_recreate_realm
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Provision First Active Directory Domain Controller
#
# ==================================================================================================
- name: Provision First Active Directory Domain Controller
  shell: "samba-tool domain provision --server-role=dc --use-rfc2307 --dns-backend=BIND9_DLZ --realm={{ ansible_domain|upper }} --domain={{ ansible_domain.split('.')[0]|upper }} --adminpass={{ samba_administrator_password }}"
  register: samba_ad_created
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname == __samba_schema_master
  notify: restart bind
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
#
#
# ==================================================================================================
- name: Restart bind
  service:
    name: bind9
    state: restarted
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: start samba-ad-dc
  service:
    name: samba-ad-dc
    state: started
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Reverse Zone
  command:
    cmd: "samba-tool dns zonecreate localhost {{ ansible_host.split('.')[1] }}.{{ ansible_host.split('.')[0] }}.in-addr.arpa -U administrator --password={{ samba_administrator_password }}"
  become: yes
  ignore_errors: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Add Domain Controller to Reverse Zone
  command:
    cmd: "samba-tool dns add localhost {{ ansible_host.split('.')[1] }}.{{ ansible_host.split('.')[0] }}.in-addr.arpa {{ ansible_host.split('.')[3] }}.{{ ansible_host.split('.')[2] }} PTR {{ inventory_hostname }} -U administrator --password={{ samba_administrator_password }}"
  become: yes
  ignore_errors: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Active Directory Domain Controller
#
# ==================================================================================================
- name: (Tests) List all shares provided by the DC
  shell: "smbclient -L localhost -U%"
  register: shares
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: Verify SMB Authentication
#   shell: "smbclient //localhost/netlogon -UAdministrator -c 'ls' --password={{ samba_administrator_password }}"
#   register: success
#   become: yes
#   when: inventory_hostname == __samba_schema_master
#   ignore_errors: yes

#- debug:
#    var: success
#    verbosity: 2

- name: "(Tests) Tcp-based _ldap SRV record in the domain"
  shell: "host -t SRV _ldap._tcp.{{ ansible_domain }}."
  register: success
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "(Tests) udp-based _kerberos SRV resource record in the domain"
  shell: "host -t SRV _kerberos._udp.{{ ansible_domain }}."
  register: success
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) The A record of the domain controller"
  shell: "host -t A {{ ansible_fqdn }}."
  register: success
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  command:
    cmd: "klist"
  register: success
  become: no
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) The PTR record of the domain controller"
  shell: "host -t PTR {{ ansible_host }}"
  register: success
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  debug:
    msg: "{{ success }}"
    verbosity: 1
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Add a little hardening
#
# https://fy.blackhats.net.au/blog/html/2018/04/18/making_samba_4_the_default_ldap_server.html
#
# ==================================================================================================
# - name: "Disallow any user to join host to AD"
#   shell: "{{ item }}"
#   register: success
#   become: yes
#   loop:
#     - "samba-tool domain settings account_machine_join_quota 0"
#   when: inventory_hostname == __samba_schema_master
#   ignore_errors: yes

- name: "Disable Guest Account"
  shell: "{{ item }}"
  register: success
  become: yes
  loop:
    - "samba-tool user disable Guest"
  ignore_errors: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Modify Password Policy: these should only be changed if we have a reason to suspect they are comprimised.
#
# https://dev.tranquil.it/samba/en/samba_advanced_methods/samba_password_policies.html
# https://oitibs.com/samba4-domain-password-policy/
#
# ==================================================================================================
- name: Set Password Expiration
  shell: "samba-tool domain passwordsettings set --max-pwd-age={{ samba_domain_password_expiration }}"
  register: success
  become: yes
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Kerberos
#
# ==================================================================================================
- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  command:
    cmd: "klist"
  register: success
  become: no
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  debug:
    msg: "{{ success }}"
    verbosity: 1
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm-debug

# ==================================================================================================
#
# Provision Active Directory Domain Controllers
#
# ==================================================================================================
- name: Provision Subsequent Active Directory Domain Controller
  shell: "samba-tool domain join {{ ansible_domain }} DC --dns-backend=BIND9_DLZ -U'{{ ansible_domain.split('.')[0]|upper }}\administrator' --password={{ samba_administrator_password }}"
  register: samba_ad_created
  become: yes
  notify: Update krb5
  when:
    - not __samba_joined_as_domain_controller
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Find idmap.ldb
#
# ==================================================================================================
# - name: Find idmap.ldb
#   find:
#     path: "/var"
#     pattern: idmap.ldb
#     recurse: yes
#   register: idmap_file
#   when: inventory_hostname == __samba_schema_master

- name: Backup idmap.ldb
  shell: "tdbbackup -s .bak /var/lib/samba/private/idmap.ldb"
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Fetch idmap.ldb
  fetch: 
    src: "/var/lib/samba/private/idmap.ldb.bak"
    dest: "/tmp/idmap.ldb"
    flat: yes
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Copy idmap.ldb to New Servers
  copy:
    src: "/tmp/idmap.ldb"
    dest: "/var/lib/samba/private/idmap.ldb"
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Flush Net Cache on New DC
  shell: "net cache flush"
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Syncronize Sysvol to New Servers
#
# Command Equivalent:
# - /usr/bin/rsync -XAavz --delete-after -f"+ */" -f"- *"  /var/lib/samba/sysvol root@DC2:/var/lib/samba
#
# References:
# - https://wiki.samba.org/index.php/Bidirectional_Rsync/Unison_based_SysVol_replication_workaround
#
# ==================================================================================================
# - name: "Sync Sysvol to new servers"
#   synchronize:
#     src: "/var/lib/samba/sysvol"
#     dest: "/var/lib/samba"
#     archive: yes
#     compress: yes
#     rsync_opts:
#       - "--xattrs"
#       - "--acls"
#       - "--delete-after"
#       - '--filter="+ */"'
#       - '--filter="- *"'
#   delegate_to: "{{ __samba_schema_master }}"
#   when: inventory_hostname != __samba_schema_master

- name: Reset Samba ACLs on Sysvol for New
  shell: "samba-tool ntacl sysvolreset"
  become: yes
  when:
    - __samba_recreate_realm
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Configure smb.conf file
  template:
    src: "smb.conf.j2"
    dest: /etc/samba/smb.conf
    owner: root
    group: root
    mode: 0644
  become: yes
  notify: restart samba-ad-dc
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Configure user.map file
  template:
    src: "user_map.j2"
    dest: /etc/samba/user.map
    owner: root
    group: root
    mode: 0644
  become: yes
  notify: restart samba-ad-dc
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: start samba-ad-dc
  service:
    name: samba-ad-dc
    state: started
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Test Active Directory Domain Controllers
#
# - Verify Samba Sysvol Replication
#   Reference: https://wiki.samba.org/index.php/Verifying_the_Directory_Replication_Statuses
#
# ==================================================================================================
- name: (Tests) Verify Sysvol Replication
  shell: "samba-tool drs showrepl"
  become: yes
  when:
    - inventory_hostname != __samba_schema_master
  notify: restart bind
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: (Tests) List all shares provided by the Domain Controller
  shell: "smbclient -L localhost -U%"
  register: shares
  become: yes
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: Verify SMB Authentication
#   shell: "smbclient //localhost/netlogon -UAdministrator -c 'ls' --password={{ samba_administrator_password }}"
#   register: success
#   become: yes
#   when: inventory_hostname != __samba_schema_master
#   ignore_errors: yes

#- debug:
#    var: success
#    verbosity: 2

- name: (Tests) The A record of the domain controller"
  shell: "host -t A {{ ansible_fqdn }}."
  register: success
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: "(Tests) udp-based _kerberos SRV resource record in the domain"
  shell: "host -t SRV _kerberos._udp.{{ ansible_domain }}."
  register: success
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  expect:
    command: kinit administrator
    responses:
      (?i)password: "{{ samba_administrator_password }}"
  no_log: true
  become: no
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Test Active Directory Domain Controller
  command:
    cmd: "klist"
  register: success
  become: no
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Print Success
  debug:
    msg:
      - "{{ success }}"
    verbosity: 1
  when:
    - inventory_hostname != __samba_schema_master
  tags:
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# ==================================================================================================
#
# Configure automated Sysvol Replication
#
# References:
#   - https://wiki.samba.org/index.php/SysVol_replication_(DFS-R)
#   - https://wiki.samba.org/index.php/Bidirectional_Rsync/Unison_based_SysVol_replication_workaround
#
# ==================================================================================================
- name: Make Control Directory
  file:
    path: "~/.ssh/ctl"
    state: directory
    owner: root
    group: root
    mode: "0755"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create SSH Control Configuration
  template:
    src: "control_ssh.j2"
    dest: "~/.ssh/ctl/config"
    owner: root
    group: root
    mode: "0644"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Log File
  file:
    path: "/var/log/sysvol-sync.log"
    state: touch
    owner: root
    group: root
    mode: "0640"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Ensure unison configuration directory exists
  file:
    path: "~/.unison"
    state: directory
    owner: root
    group: root
    mode: "0750"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Unison Preferences
  template:
    src: "unison.j2"
    dest: "~/.unison/default.prf"
    owner: root
    group: root
    mode: "0644"
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

- name: Create Backup of SysVol directory
  archive:
    path: /var/lib/samba/sysvol
    dest: ~/sysvol.tar.xz
  become: yes
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug

# - name: "Test Unison Synchronization"
#   shell: "/usr/bin/unison"
#   become: yes
#   register: success
#   when:
#     - inventory_hostname == __samba_schema_master
#   tags:
#     - samba_domain_controllers
#     - samba-domain-controllers
#     - samba_domain_controllers_debug
#     - samba-domain-controllers-debug

- name: Create Cron Sync
  cron:
    name: "Syncronize SysVol Directories"
    minute: "*/5"
    hour: "*"
    day: "*"
    weekday: "*"
    month: "*"
    job: "/usr/bin/unison -silent"
  when:
    - inventory_hostname == __samba_schema_master
  tags:
    - samba_domain_controllers
    - samba-domain-controllers
    - samba_domain_controllers_debug
    - samba-domain-controllers-debug
    - recreate-realm
    - recreate-realm-debug
